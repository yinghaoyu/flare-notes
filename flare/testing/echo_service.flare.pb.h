// Generated by Flare's Protocol Buffers plugin, DO NOT EDIT IT!
// Source: flare/testing/echo_service.proto

#ifndef FLARE_PROTOBUF_PLUGIN_GENERATED_666c6172652f74657374696e672f6563686f5f73657276696365_H_
#define FLARE_PROTOBUF_PLUGIN_GENERATED_666c6172652f74657374696e672f6563686f5f73657276696365_H_

#include <utility>

#include "flare/testing/echo_service.pb.h"

#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>

#include "flare/base/callback.h"
#include "flare/base/future.h"
#include "flare/base/status.h"
#include "flare/base/down_cast.h"
#include "flare/base/maybe_owning.h"
#include "flare/rpc/internal/stream.h"

namespace flare {

class RpcServerController;
class RpcClientController;

}  // namespace flare


namespace flare::testing {

class SyncEchoService : public ::google::protobuf::Service {
 protected:
  SyncEchoService() = default;

 public:
  virtual ~SyncEchoService() = default;

  virtual void Echo(
      const ::flare::testing::EchoRequest& request,
      ::flare::testing::EchoResponse* response,
      ::flare::RpcServerController* controller);
  virtual void EchoWithMaxQueueingDelay(
      const ::flare::testing::EchoRequest& request,
      ::flare::testing::EchoResponse* response,
      ::flare::RpcServerController* controller);
  virtual void EchoWithMaxOngoingRequests(
      const ::flare::testing::EchoRequest& request,
      ::flare::testing::EchoResponse* response,
      ::flare::RpcServerController* controller);
  virtual void EchoStreamRequest(
      ::flare::StreamReader<::flare::testing::EchoRequest> reader,
      ::flare::testing::EchoResponse* response,
      ::flare::RpcServerController* controller);
  virtual void EchoStreamResponse(
      const ::flare::testing::EchoRequest& request,
      ::flare::StreamWriter<::flare::testing::EchoResponse> writer,
      ::flare::RpcServerController* controller);
  virtual void EchoStreamBoth(
      ::flare::StreamReader<::flare::testing::EchoRequest> reader,
      ::flare::StreamWriter<::flare::testing::EchoResponse> writer,
      ::flare::RpcServerController* controller);

  ///////////////////////////////////////////////
  // Methods below are for internal use only.  //
  ///////////////////////////////////////////////

  const ::google::protobuf::ServiceDescriptor* GetDescriptor() final;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const final;
  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const final;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SyncEchoService);
};

class EchoService_SyncStub {
  using MaybeOwningChannel = ::flare::MaybeOwningArgument<
      ::google::protobuf::RpcChannel>;
 public:
  EchoService_SyncStub(MaybeOwningChannel channel)
    : channel_(std::move(channel)) {}

  EchoService_SyncStub(const std::string& uri);

  ::flare::Expected<::flare::testing::EchoResponse,
                    ::flare::Status>
  Echo(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  ::flare::Expected<::flare::testing::EchoResponse,
                    ::flare::Status>
  EchoWithMaxQueueingDelay(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  ::flare::Expected<::flare::testing::EchoResponse,
                    ::flare::Status>
  EchoWithMaxOngoingRequests(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  std::pair<
      ::flare::StreamReader<::flare::testing::EchoResponse>,
      ::flare::StreamWriter<::flare::testing::EchoRequest>>
  EchoStreamRequest(::flare::RpcClientController* controller);
  ::flare::StreamReader<::flare::testing::EchoResponse> EchoStreamResponse(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  std::pair<
      ::flare::StreamReader<::flare::testing::EchoResponse>,
      ::flare::StreamWriter<::flare::testing::EchoRequest>>
  EchoStreamBoth(::flare::RpcClientController* controller);

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_SyncStub);
  ::flare::MaybeOwning<::google::protobuf::RpcChannel> channel_;
};

class EchoService_AsyncStub {
  using MaybeOwningChannel = ::flare::MaybeOwningArgument<
      ::google::protobuf::RpcChannel>;
 public:
  EchoService_AsyncStub(MaybeOwningChannel channel)
    : channel_(std::move(channel)) {}

  EchoService_AsyncStub(const std::string& uri);

  ::flare::Future<
      ::flare::Expected<::flare::testing::EchoResponse,
      ::flare::Status>>
  Echo(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  ::flare::Future<
      ::flare::Expected<::flare::testing::EchoResponse,
      ::flare::Status>>
  EchoWithMaxQueueingDelay(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  ::flare::Future<
      ::flare::Expected<::flare::testing::EchoResponse,
      ::flare::Status>>
  EchoWithMaxOngoingRequests(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  std::pair<
      ::flare::AsyncStreamReader<::flare::testing::EchoResponse>,
      ::flare::AsyncStreamWriter<::flare::testing::EchoRequest>>
  EchoStreamRequest(
      ::flare::RpcClientController* controller);
  ::flare::AsyncStreamReader<::flare::testing::EchoResponse>
  EchoStreamResponse(
      const ::flare::testing::EchoRequest& request,
      ::flare::RpcClientController* controller);
  std::pair<
      ::flare::AsyncStreamReader<::flare::testing::EchoResponse>,
      ::flare::AsyncStreamWriter<::flare::testing::EchoRequest>>
  EchoStreamBoth(
      ::flare::RpcClientController* controller);

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_AsyncStub);
  ::flare::MaybeOwning<::google::protobuf::RpcChannel> channel_;
};


}


#endif  // FLARE_PROTOBUF_PLUGIN_GENERATED_666c6172652f74657374696e672f6563686f5f73657276696365_H_
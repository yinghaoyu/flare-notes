// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flare/testing/message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flare/testing/message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flare {
namespace testing {
class OneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<One>
     _instance;
} _One_default_instance_;
class TwoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Two>
     _instance;
} _Two_default_instance_;
class ComplexMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ComplexMessage>
     _instance;
  const ::flare::testing::One* one_;
  const ::flare::testing::Two* two_;
} _ComplexMessage_default_instance_;

namespace protobuf_flare_2ftesting_2fmessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(One, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(One, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(One, integer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Two, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Two, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Two, integer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, integer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, boolean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, enumeration_),
  offsetof(ComplexMessageDefaultTypeInternal, one_),
  offsetof(ComplexMessageDefaultTypeInternal, two_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, numbers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, strs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, number_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(One)},
  { 7, -1, sizeof(Two)},
  { 14, -1, sizeof(ComplexMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_One_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Two_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComplexMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flare/testing/message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _One_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_One_default_instance_);_Two_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Two_default_instance_);_ComplexMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ComplexMessage_default_instance_);_ComplexMessage_default_instance_.one_ = const_cast< ::flare::testing::One*>(
      ::flare::testing::One::internal_default_instance());
  _ComplexMessage_default_instance_.two_ = const_cast< ::flare::testing::Two*>(
      ::flare::testing::Two::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033flare/testing/message.proto\022\rflare.tes"
      "ting\"#\n\003One\022\013\n\003str\030\001 \001(\t\022\017\n\007integer\030\002 \001("
      "\005\"#\n\003Two\022\013\n\003str\030\001 \001(\t\022\017\n\007integer\030\002 \001(\005\"\330"
      "\001\n\016ComplexMessage\022\017\n\007integer\030\001 \001(\005\022\013\n\003st"
      "r\030\002 \001(\t\022\017\n\007boolean\030\003 \001(\010\022(\n\013enumeration\030"
      "\004 \001(\0162\023.flare.testing.Enum\022!\n\003one\030\005 \001(\0132"
      "\022.flare.testing.OneH\000\022!\n\003two\030\006 \001(\0132\022.fla"
      "re.testing.TwoH\000\022\017\n\007numbers\030\007 \003(\005\022\014\n\004str"
      "s\030\010 \003(\tB\010\n\006number**\n\004Enum\022\n\n\006ENUM_0\020\000\022\n\n"
      "\006ENUM_1\020\001\022\n\n\006ENUM_2\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flare/testing/message.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_flare_2ftesting_2fmessage_2eproto

const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
  protobuf_flare_2ftesting_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2ftesting_2fmessage_2eproto::file_level_enum_descriptors[0];
}
bool Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int One::kStrFieldNumber;
const int One::kIntegerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

One::One()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2ftesting_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.testing.One)
}
One::One(const One& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str().size() > 0) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  integer_ = from.integer_;
  // @@protoc_insertion_point(copy_constructor:flare.testing.One)
}

void One::SharedCtor() {
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integer_ = 0;
  _cached_size_ = 0;
}

One::~One() {
  // @@protoc_insertion_point(destructor:flare.testing.One)
  SharedDtor();
}

void One::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void One::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* One::descriptor() {
  protobuf_flare_2ftesting_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2ftesting_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const One& One::default_instance() {
  protobuf_flare_2ftesting_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

One* One::New(::google::protobuf::Arena* arena) const {
  One* n = new One;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void One::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.testing.One)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integer_ = 0;
  _internal_metadata_.Clear();
}

bool One::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.testing.One)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.testing.One.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 integer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.testing.One)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.testing.One)
  return false;
#undef DO_
}

void One::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.testing.One)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.One.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // int32 integer = 2;
  if (this->integer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.testing.One)
}

::google::protobuf::uint8* One::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.testing.One)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.One.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // int32 integer = 2;
  if (this->integer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.testing.One)
  return target;
}

size_t One::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.testing.One)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string str = 1;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  // int32 integer = 2;
  if (this->integer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void One::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.testing.One)
  GOOGLE_DCHECK_NE(&from, this);
  const One* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const One>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.testing.One)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.testing.One)
    MergeFrom(*source);
  }
}

void One::MergeFrom(const One& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.testing.One)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.integer() != 0) {
    set_integer(from.integer());
  }
}

void One::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.testing.One)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void One::CopyFrom(const One& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.testing.One)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool One::IsInitialized() const {
  return true;
}

void One::Swap(One* other) {
  if (other == this) return;
  InternalSwap(other);
}
void One::InternalSwap(One* other) {
  using std::swap;
  str_.Swap(&other->str_);
  swap(integer_, other->integer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata One::GetMetadata() const {
  protobuf_flare_2ftesting_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2ftesting_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// One

// string str = 1;
void One::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& One::str() const {
  // @@protoc_insertion_point(field_get:flare.testing.One.str)
  return str_.GetNoArena();
}
void One::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.testing.One.str)
}
#if LANG_CXX11
void One::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.testing.One.str)
}
#endif
void One::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.testing.One.str)
}
void One::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.testing.One.str)
}
::std::string* One::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:flare.testing.One.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* One::release_str() {
  // @@protoc_insertion_point(field_release:flare.testing.One.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void One::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:flare.testing.One.str)
}

// int32 integer = 2;
void One::clear_integer() {
  integer_ = 0;
}
::google::protobuf::int32 One::integer() const {
  // @@protoc_insertion_point(field_get:flare.testing.One.integer)
  return integer_;
}
void One::set_integer(::google::protobuf::int32 value) {
  
  integer_ = value;
  // @@protoc_insertion_point(field_set:flare.testing.One.integer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Two::kStrFieldNumber;
const int Two::kIntegerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Two::Two()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2ftesting_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.testing.Two)
}
Two::Two(const Two& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str().size() > 0) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  integer_ = from.integer_;
  // @@protoc_insertion_point(copy_constructor:flare.testing.Two)
}

void Two::SharedCtor() {
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integer_ = 0;
  _cached_size_ = 0;
}

Two::~Two() {
  // @@protoc_insertion_point(destructor:flare.testing.Two)
  SharedDtor();
}

void Two::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Two::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Two::descriptor() {
  protobuf_flare_2ftesting_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2ftesting_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Two& Two::default_instance() {
  protobuf_flare_2ftesting_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Two* Two::New(::google::protobuf::Arena* arena) const {
  Two* n = new Two;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Two::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.testing.Two)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integer_ = 0;
  _internal_metadata_.Clear();
}

bool Two::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.testing.Two)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.testing.Two.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 integer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.testing.Two)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.testing.Two)
  return false;
#undef DO_
}

void Two::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.testing.Two)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.Two.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // int32 integer = 2;
  if (this->integer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.testing.Two)
}

::google::protobuf::uint8* Two::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.testing.Two)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.Two.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // int32 integer = 2;
  if (this->integer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.testing.Two)
  return target;
}

size_t Two::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.testing.Two)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string str = 1;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  // int32 integer = 2;
  if (this->integer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Two::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.testing.Two)
  GOOGLE_DCHECK_NE(&from, this);
  const Two* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Two>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.testing.Two)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.testing.Two)
    MergeFrom(*source);
  }
}

void Two::MergeFrom(const Two& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.testing.Two)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.integer() != 0) {
    set_integer(from.integer());
  }
}

void Two::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.testing.Two)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Two::CopyFrom(const Two& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.testing.Two)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Two::IsInitialized() const {
  return true;
}

void Two::Swap(Two* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Two::InternalSwap(Two* other) {
  using std::swap;
  str_.Swap(&other->str_);
  swap(integer_, other->integer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Two::GetMetadata() const {
  protobuf_flare_2ftesting_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2ftesting_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Two

// string str = 1;
void Two::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Two::str() const {
  // @@protoc_insertion_point(field_get:flare.testing.Two.str)
  return str_.GetNoArena();
}
void Two::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.testing.Two.str)
}
#if LANG_CXX11
void Two::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.testing.Two.str)
}
#endif
void Two::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.testing.Two.str)
}
void Two::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.testing.Two.str)
}
::std::string* Two::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:flare.testing.Two.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Two::release_str() {
  // @@protoc_insertion_point(field_release:flare.testing.Two.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Two::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:flare.testing.Two.str)
}

// int32 integer = 2;
void Two::clear_integer() {
  integer_ = 0;
}
::google::protobuf::int32 Two::integer() const {
  // @@protoc_insertion_point(field_get:flare.testing.Two.integer)
  return integer_;
}
void Two::set_integer(::google::protobuf::int32 value) {
  
  integer_ = value;
  // @@protoc_insertion_point(field_set:flare.testing.Two.integer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexMessage::kIntegerFieldNumber;
const int ComplexMessage::kStrFieldNumber;
const int ComplexMessage::kBooleanFieldNumber;
const int ComplexMessage::kEnumerationFieldNumber;
const int ComplexMessage::kOneFieldNumber;
const int ComplexMessage::kTwoFieldNumber;
const int ComplexMessage::kNumbersFieldNumber;
const int ComplexMessage::kStrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexMessage::ComplexMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2ftesting_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.testing.ComplexMessage)
}
ComplexMessage::ComplexMessage(const ComplexMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      numbers_(from.numbers_),
      strs_(from.strs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str().size() > 0) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  ::memcpy(&integer_, &from.integer_,
    static_cast<size_t>(reinterpret_cast<char*>(&enumeration_) -
    reinterpret_cast<char*>(&integer_)) + sizeof(enumeration_));
  clear_has_number();
  switch (from.number_case()) {
    case kOne: {
      mutable_one()->::flare::testing::One::MergeFrom(from.one());
      break;
    }
    case kTwo: {
      mutable_two()->::flare::testing::Two::MergeFrom(from.two());
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flare.testing.ComplexMessage)
}

void ComplexMessage::SharedCtor() {
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&integer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enumeration_) -
      reinterpret_cast<char*>(&integer_)) + sizeof(enumeration_));
  clear_has_number();
  _cached_size_ = 0;
}

ComplexMessage::~ComplexMessage() {
  // @@protoc_insertion_point(destructor:flare.testing.ComplexMessage)
  SharedDtor();
}

void ComplexMessage::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_number()) {
    clear_number();
  }
}

void ComplexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexMessage::descriptor() {
  protobuf_flare_2ftesting_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2ftesting_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComplexMessage& ComplexMessage::default_instance() {
  protobuf_flare_2ftesting_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComplexMessage* ComplexMessage::New(::google::protobuf::Arena* arena) const {
  ComplexMessage* n = new ComplexMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexMessage::clear_number() {
// @@protoc_insertion_point(one_of_clear_start:flare.testing.ComplexMessage)
  switch (number_case()) {
    case kOne: {
      delete number_.one_;
      break;
    }
    case kTwo: {
      delete number_.two_;
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NUMBER_NOT_SET;
}


void ComplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.testing.ComplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numbers_.Clear();
  strs_.Clear();
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&integer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enumeration_) -
      reinterpret_cast<char*>(&integer_)) + sizeof(enumeration_));
  clear_number();
  _internal_metadata_.Clear();
}

bool ComplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.testing.ComplexMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 integer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.testing.ComplexMessage.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolean = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flare.testing.Enum enumeration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enumeration(static_cast< ::flare::testing::Enum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flare.testing.One one = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_one()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flare.testing.Two two = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_two()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 numbers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_numbers())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_numbers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string strs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strs(this->strs_size() - 1).data(),
            static_cast<int>(this->strs(this->strs_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.testing.ComplexMessage.strs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.testing.ComplexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.testing.ComplexMessage)
  return false;
#undef DO_
}

void ComplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.testing.ComplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 integer = 1;
  if (this->integer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->integer(), output);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.ComplexMessage.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  // bool boolean = 3;
  if (this->boolean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->boolean(), output);
  }

  // .flare.testing.Enum enumeration = 4;
  if (this->enumeration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->enumeration(), output);
  }

  // .flare.testing.One one = 5;
  if (has_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *number_.one_, output);
  }

  // .flare.testing.Two two = 6;
  if (has_two()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *number_.two_, output);
  }

  // repeated int32 numbers = 7;
  if (this->numbers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _numbers_cached_byte_size_));
  }
  for (int i = 0, n = this->numbers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->numbers(i), output);
  }

  // repeated string strs = 8;
  for (int i = 0, n = this->strs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strs(i).data(), static_cast<int>(this->strs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.ComplexMessage.strs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->strs(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.testing.ComplexMessage)
}

::google::protobuf::uint8* ComplexMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.testing.ComplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 integer = 1;
  if (this->integer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->integer(), target);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.ComplexMessage.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  // bool boolean = 3;
  if (this->boolean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->boolean(), target);
  }

  // .flare.testing.Enum enumeration = 4;
  if (this->enumeration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->enumeration(), target);
  }

  // .flare.testing.One one = 5;
  if (has_one()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *number_.one_, deterministic, target);
  }

  // .flare.testing.Two two = 6;
  if (has_two()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *number_.two_, deterministic, target);
  }

  // repeated int32 numbers = 7;
  if (this->numbers_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _numbers_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->numbers_, target);
  }

  // repeated string strs = 8;
  for (int i = 0, n = this->strs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strs(i).data(), static_cast<int>(this->strs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.testing.ComplexMessage.strs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->strs(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.testing.ComplexMessage)
  return target;
}

size_t ComplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.testing.ComplexMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 numbers = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _numbers_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string strs = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strs_size());
  for (int i = 0, n = this->strs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strs(i));
  }

  // string str = 2;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  // int32 integer = 1;
  if (this->integer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer());
  }

  // bool boolean = 3;
  if (this->boolean() != 0) {
    total_size += 1 + 1;
  }

  // .flare.testing.Enum enumeration = 4;
  if (this->enumeration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enumeration());
  }

  switch (number_case()) {
    // .flare.testing.One one = 5;
    case kOne: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *number_.one_);
      break;
    }
    // .flare.testing.Two two = 6;
    case kTwo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *number_.two_);
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.testing.ComplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.testing.ComplexMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.testing.ComplexMessage)
    MergeFrom(*source);
  }
}

void ComplexMessage::MergeFrom(const ComplexMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.testing.ComplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numbers_.MergeFrom(from.numbers_);
  strs_.MergeFrom(from.strs_);
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.integer() != 0) {
    set_integer(from.integer());
  }
  if (from.boolean() != 0) {
    set_boolean(from.boolean());
  }
  if (from.enumeration() != 0) {
    set_enumeration(from.enumeration());
  }
  switch (from.number_case()) {
    case kOne: {
      mutable_one()->::flare::testing::One::MergeFrom(from.one());
      break;
    }
    case kTwo: {
      mutable_two()->::flare::testing::Two::MergeFrom(from.two());
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
}

void ComplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.testing.ComplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexMessage::CopyFrom(const ComplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.testing.ComplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage::IsInitialized() const {
  return true;
}

void ComplexMessage::Swap(ComplexMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexMessage::InternalSwap(ComplexMessage* other) {
  using std::swap;
  numbers_.InternalSwap(&other->numbers_);
  strs_.InternalSwap(&other->strs_);
  str_.Swap(&other->str_);
  swap(integer_, other->integer_);
  swap(boolean_, other->boolean_);
  swap(enumeration_, other->enumeration_);
  swap(number_, other->number_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexMessage::GetMetadata() const {
  protobuf_flare_2ftesting_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2ftesting_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexMessage

// int32 integer = 1;
void ComplexMessage::clear_integer() {
  integer_ = 0;
}
::google::protobuf::int32 ComplexMessage::integer() const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.integer)
  return integer_;
}
void ComplexMessage::set_integer(::google::protobuf::int32 value) {
  
  integer_ = value;
  // @@protoc_insertion_point(field_set:flare.testing.ComplexMessage.integer)
}

// string str = 2;
void ComplexMessage::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ComplexMessage::str() const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.str)
  return str_.GetNoArena();
}
void ComplexMessage::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.testing.ComplexMessage.str)
}
#if LANG_CXX11
void ComplexMessage::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.testing.ComplexMessage.str)
}
#endif
void ComplexMessage::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.testing.ComplexMessage.str)
}
void ComplexMessage::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.testing.ComplexMessage.str)
}
::std::string* ComplexMessage::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:flare.testing.ComplexMessage.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ComplexMessage::release_str() {
  // @@protoc_insertion_point(field_release:flare.testing.ComplexMessage.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComplexMessage::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:flare.testing.ComplexMessage.str)
}

// bool boolean = 3;
void ComplexMessage::clear_boolean() {
  boolean_ = false;
}
bool ComplexMessage::boolean() const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.boolean)
  return boolean_;
}
void ComplexMessage::set_boolean(bool value) {
  
  boolean_ = value;
  // @@protoc_insertion_point(field_set:flare.testing.ComplexMessage.boolean)
}

// .flare.testing.Enum enumeration = 4;
void ComplexMessage::clear_enumeration() {
  enumeration_ = 0;
}
::flare::testing::Enum ComplexMessage::enumeration() const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.enumeration)
  return static_cast< ::flare::testing::Enum >(enumeration_);
}
void ComplexMessage::set_enumeration(::flare::testing::Enum value) {
  
  enumeration_ = value;
  // @@protoc_insertion_point(field_set:flare.testing.ComplexMessage.enumeration)
}

// .flare.testing.One one = 5;
bool ComplexMessage::has_one() const {
  return number_case() == kOne;
}
void ComplexMessage::set_has_one() {
  _oneof_case_[0] = kOne;
}
void ComplexMessage::clear_one() {
  if (has_one()) {
    delete number_.one_;
    clear_has_number();
  }
}
 const ::flare::testing::One& ComplexMessage::one() const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.one)
  return has_one()
      ? *number_.one_
      : ::flare::testing::One::default_instance();
}
::flare::testing::One* ComplexMessage::mutable_one() {
  if (!has_one()) {
    clear_number();
    set_has_one();
    number_.one_ = new ::flare::testing::One;
  }
  // @@protoc_insertion_point(field_mutable:flare.testing.ComplexMessage.one)
  return number_.one_;
}
::flare::testing::One* ComplexMessage::release_one() {
  // @@protoc_insertion_point(field_release:flare.testing.ComplexMessage.one)
  if (has_one()) {
    clear_has_number();
    ::flare::testing::One* temp = number_.one_;
    number_.one_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ComplexMessage::set_allocated_one(::flare::testing::One* one) {
  clear_number();
  if (one) {
    set_has_one();
    number_.one_ = one;
  }
  // @@protoc_insertion_point(field_set_allocated:flare.testing.ComplexMessage.one)
}

// .flare.testing.Two two = 6;
bool ComplexMessage::has_two() const {
  return number_case() == kTwo;
}
void ComplexMessage::set_has_two() {
  _oneof_case_[0] = kTwo;
}
void ComplexMessage::clear_two() {
  if (has_two()) {
    delete number_.two_;
    clear_has_number();
  }
}
 const ::flare::testing::Two& ComplexMessage::two() const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.two)
  return has_two()
      ? *number_.two_
      : ::flare::testing::Two::default_instance();
}
::flare::testing::Two* ComplexMessage::mutable_two() {
  if (!has_two()) {
    clear_number();
    set_has_two();
    number_.two_ = new ::flare::testing::Two;
  }
  // @@protoc_insertion_point(field_mutable:flare.testing.ComplexMessage.two)
  return number_.two_;
}
::flare::testing::Two* ComplexMessage::release_two() {
  // @@protoc_insertion_point(field_release:flare.testing.ComplexMessage.two)
  if (has_two()) {
    clear_has_number();
    ::flare::testing::Two* temp = number_.two_;
    number_.two_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ComplexMessage::set_allocated_two(::flare::testing::Two* two) {
  clear_number();
  if (two) {
    set_has_two();
    number_.two_ = two;
  }
  // @@protoc_insertion_point(field_set_allocated:flare.testing.ComplexMessage.two)
}

// repeated int32 numbers = 7;
int ComplexMessage::numbers_size() const {
  return numbers_.size();
}
void ComplexMessage::clear_numbers() {
  numbers_.Clear();
}
::google::protobuf::int32 ComplexMessage::numbers(int index) const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.numbers)
  return numbers_.Get(index);
}
void ComplexMessage::set_numbers(int index, ::google::protobuf::int32 value) {
  numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:flare.testing.ComplexMessage.numbers)
}
void ComplexMessage::add_numbers(::google::protobuf::int32 value) {
  numbers_.Add(value);
  // @@protoc_insertion_point(field_add:flare.testing.ComplexMessage.numbers)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ComplexMessage::numbers() const {
  // @@protoc_insertion_point(field_list:flare.testing.ComplexMessage.numbers)
  return numbers_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ComplexMessage::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:flare.testing.ComplexMessage.numbers)
  return &numbers_;
}

// repeated string strs = 8;
int ComplexMessage::strs_size() const {
  return strs_.size();
}
void ComplexMessage::clear_strs() {
  strs_.Clear();
}
const ::std::string& ComplexMessage::strs(int index) const {
  // @@protoc_insertion_point(field_get:flare.testing.ComplexMessage.strs)
  return strs_.Get(index);
}
::std::string* ComplexMessage::mutable_strs(int index) {
  // @@protoc_insertion_point(field_mutable:flare.testing.ComplexMessage.strs)
  return strs_.Mutable(index);
}
void ComplexMessage::set_strs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flare.testing.ComplexMessage.strs)
  strs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ComplexMessage::set_strs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flare.testing.ComplexMessage.strs)
  strs_.Mutable(index)->assign(std::move(value));
}
#endif
void ComplexMessage::set_strs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flare.testing.ComplexMessage.strs)
}
void ComplexMessage::set_strs(int index, const char* value, size_t size) {
  strs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flare.testing.ComplexMessage.strs)
}
::std::string* ComplexMessage::add_strs() {
  // @@protoc_insertion_point(field_add_mutable:flare.testing.ComplexMessage.strs)
  return strs_.Add();
}
void ComplexMessage::add_strs(const ::std::string& value) {
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flare.testing.ComplexMessage.strs)
}
#if LANG_CXX11
void ComplexMessage::add_strs(::std::string&& value) {
  strs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flare.testing.ComplexMessage.strs)
}
#endif
void ComplexMessage::add_strs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flare.testing.ComplexMessage.strs)
}
void ComplexMessage::add_strs(const char* value, size_t size) {
  strs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flare.testing.ComplexMessage.strs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComplexMessage::strs() const {
  // @@protoc_insertion_point(field_list:flare.testing.ComplexMessage.strs)
  return strs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ComplexMessage::mutable_strs() {
  // @@protoc_insertion_point(field_mutable_list:flare.testing.ComplexMessage.strs)
  return &strs_;
}

bool ComplexMessage::has_number() const {
  return number_case() != NUMBER_NOT_SET;
}
void ComplexMessage::clear_has_number() {
  _oneof_case_[0] = NUMBER_NOT_SET;
}
ComplexMessage::NumberCase ComplexMessage::number_case() const {
  return ComplexMessage::NumberCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace flare

// @@protoc_insertion_point(global_scope)

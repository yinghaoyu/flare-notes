// Generated by Flare's Protocol Buffers plugin, DO NOT EDIT IT!
// Source: flare/testing/relay_service.proto

#ifndef FLARE_PROTOBUF_PLUGIN_GENERATED_666c6172652f74657374696e672f72656c61795f73657276696365_H_
#define FLARE_PROTOBUF_PLUGIN_GENERATED_666c6172652f74657374696e672f72656c61795f73657276696365_H_

#include <utility>

#include "flare/testing/relay_service.pb.h"

#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>

#include "flare/base/callback.h"
#include "flare/base/future.h"
#include "flare/base/status.h"
#include "flare/base/down_cast.h"
#include "flare/base/maybe_owning.h"
#include "flare/rpc/internal/stream.h"

namespace flare {

class RpcServerController;
class RpcClientController;

}  // namespace flare


namespace flare::testing {

class SyncRelayService : public ::google::protobuf::Service {
 protected:
  SyncRelayService() = default;

 public:
  virtual ~SyncRelayService() = default;

  virtual void Relay(
      const ::flare::testing::RelayRequest& request,
      ::flare::testing::RelayResponse* response,
      ::flare::RpcServerController* controller);

  ///////////////////////////////////////////////
  // Methods below are for internal use only.  //
  ///////////////////////////////////////////////

  const ::google::protobuf::ServiceDescriptor* GetDescriptor() final;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const final;
  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const final;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SyncRelayService);
};

class RelayService_SyncStub {
  using MaybeOwningChannel = ::flare::MaybeOwningArgument<
      ::google::protobuf::RpcChannel>;
 public:
  RelayService_SyncStub(MaybeOwningChannel channel)
    : channel_(std::move(channel)) {}

  RelayService_SyncStub(const std::string& uri);

  ::flare::Expected<::flare::testing::RelayResponse,
                    ::flare::Status>
  Relay(
      const ::flare::testing::RelayRequest& request,
      ::flare::RpcClientController* controller);

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RelayService_SyncStub);
  ::flare::MaybeOwning<::google::protobuf::RpcChannel> channel_;
};

class RelayService_AsyncStub {
  using MaybeOwningChannel = ::flare::MaybeOwningArgument<
      ::google::protobuf::RpcChannel>;
 public:
  RelayService_AsyncStub(MaybeOwningChannel channel)
    : channel_(std::move(channel)) {}

  RelayService_AsyncStub(const std::string& uri);

  ::flare::Future<
      ::flare::Expected<::flare::testing::RelayResponse,
      ::flare::Status>>
  Relay(
      const ::flare::testing::RelayRequest& request,
      ::flare::RpcClientController* controller);

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RelayService_AsyncStub);
  ::flare::MaybeOwning<::google::protobuf::RpcChannel> channel_;
};


}


#endif  // FLARE_PROTOBUF_PLUGIN_GENERATED_666c6172652f74657374696e672f72656c61795f73657276696365_H_
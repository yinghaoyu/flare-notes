// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flare/rpc/protocol/http/binlog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flare/rpc/protocol/http/binlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flare {
namespace http {
class HeaderFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeaderField>
     _instance;
} _HeaderField_default_instance_;
class SerializedClientPacketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerializedClientPacket>
     _instance;
} _SerializedClientPacket_default_instance_;
class SerializedServerPacketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerializedServerPacket>
     _instance;
} _SerializedServerPacket_default_instance_;

namespace protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderField, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, body_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(HeaderField)},
  { 7, -1, sizeof(SerializedClientPacket)},
  { 16, -1, sizeof(SerializedServerPacket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeaderField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerializedClientPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerializedServerPacket_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flare/rpc/protocol/http/binlog.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HeaderField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeaderField_default_instance_);_SerializedClientPacket_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerializedClientPacket_default_instance_);_SerializedServerPacket_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerializedServerPacket_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$flare/rpc/protocol/http/binlog.proto\022\n"
      "flare.http\")\n\013HeaderField\022\013\n\003key\030\001 \001(\t\022\r"
      "\n\005value\030\002 \001(\t\"q\n\026SerializedClientPacket\022"
      "\016\n\006status\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\022(\n\007head"
      "ers\030\003 \003(\0132\027.flare.http.HeaderField\022\014\n\004bo"
      "dy\030\004 \001(\014\"~\n\026SerializedServerPacket\022\016\n\006me"
      "thod\030\001 \001(\005\022\013\n\003uri\030\002 \001(\t\022\017\n\007version\030\005 \001(\005"
      "\022(\n\007headers\030\003 \003(\0132\027.flare.http.HeaderFie"
      "ld\022\014\n\004body\030\004 \001(\014B;Z9tencent.com/protobuf"
      "/flare/rpc/protocol/http/binlog_protob\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flare/rpc/protocol/http/binlog.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderField::kKeyFieldNumber;
const int HeaderField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderField::HeaderField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.http.HeaderField)
}
HeaderField::HeaderField(const HeaderField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:flare.http.HeaderField)
}

void HeaderField::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HeaderField::~HeaderField() {
  // @@protoc_insertion_point(destructor:flare.http.HeaderField)
  SharedDtor();
}

void HeaderField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeaderField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderField::descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeaderField& HeaderField::default_instance() {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeaderField* HeaderField::New(::google::protobuf::Arena* arena) const {
  HeaderField* n = new HeaderField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderField::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.http.HeaderField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HeaderField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.http.HeaderField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.http.HeaderField.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.http.HeaderField.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.http.HeaderField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.http.HeaderField)
  return false;
#undef DO_
}

void HeaderField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.http.HeaderField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.http.HeaderField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.http.HeaderField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.http.HeaderField)
}

::google::protobuf::uint8* HeaderField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.http.HeaderField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.http.HeaderField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.http.HeaderField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.http.HeaderField)
  return target;
}

size_t HeaderField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.http.HeaderField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.http.HeaderField)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.http.HeaderField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.http.HeaderField)
    MergeFrom(*source);
  }
}

void HeaderField::MergeFrom(const HeaderField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.http.HeaderField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void HeaderField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.http.HeaderField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderField::CopyFrom(const HeaderField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.http.HeaderField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderField::IsInitialized() const {
  return true;
}

void HeaderField::Swap(HeaderField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderField::InternalSwap(HeaderField* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderField::GetMetadata() const {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeaderField

// string key = 1;
void HeaderField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderField::key() const {
  // @@protoc_insertion_point(field_get:flare.http.HeaderField.key)
  return key_.GetNoArena();
}
void HeaderField::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.HeaderField.key)
}
#if LANG_CXX11
void HeaderField::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.HeaderField.key)
}
#endif
void HeaderField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.HeaderField.key)
}
void HeaderField::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.HeaderField.key)
}
::std::string* HeaderField::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.HeaderField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderField::release_key() {
  // @@protoc_insertion_point(field_release:flare.http.HeaderField.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:flare.http.HeaderField.key)
}

// string value = 2;
void HeaderField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderField::value() const {
  // @@protoc_insertion_point(field_get:flare.http.HeaderField.value)
  return value_.GetNoArena();
}
void HeaderField::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.HeaderField.value)
}
#if LANG_CXX11
void HeaderField::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.HeaderField.value)
}
#endif
void HeaderField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.HeaderField.value)
}
void HeaderField::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.HeaderField.value)
}
::std::string* HeaderField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.HeaderField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderField::release_value() {
  // @@protoc_insertion_point(field_release:flare.http.HeaderField.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:flare.http.HeaderField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedClientPacket::kStatusFieldNumber;
const int SerializedClientPacket::kVersionFieldNumber;
const int SerializedClientPacket::kHeadersFieldNumber;
const int SerializedClientPacket::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedClientPacket::SerializedClientPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.http.SerializedClientPacket)
}
SerializedClientPacket::SerializedClientPacket(const SerializedClientPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&status_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:flare.http.SerializedClientPacket)
}

void SerializedClientPacket::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&status_)) + sizeof(version_));
  _cached_size_ = 0;
}

SerializedClientPacket::~SerializedClientPacket() {
  // @@protoc_insertion_point(destructor:flare.http.SerializedClientPacket)
  SharedDtor();
}

void SerializedClientPacket::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerializedClientPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedClientPacket::descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerializedClientPacket& SerializedClientPacket::default_instance() {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerializedClientPacket* SerializedClientPacket::New(::google::protobuf::Arena* arena) const {
  SerializedClientPacket* n = new SerializedClientPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedClientPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.http.SerializedClientPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&status_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool SerializedClientPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.http.SerializedClientPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flare.http.HeaderField headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.http.SerializedClientPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.http.SerializedClientPacket)
  return false;
#undef DO_
}

void SerializedClientPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.http.SerializedClientPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // repeated .flare.http.HeaderField headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(static_cast<int>(i)), output);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.http.SerializedClientPacket)
}

::google::protobuf::uint8* SerializedClientPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.http.SerializedClientPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // repeated .flare.http.HeaderField headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->headers(static_cast<int>(i)), deterministic, target);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.http.SerializedClientPacket)
  return target;
}

size_t SerializedClientPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.http.SerializedClientPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flare.http.HeaderField headers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(static_cast<int>(i)));
    }
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedClientPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.http.SerializedClientPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedClientPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedClientPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.http.SerializedClientPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.http.SerializedClientPacket)
    MergeFrom(*source);
  }
}

void SerializedClientPacket::MergeFrom(const SerializedClientPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.http.SerializedClientPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void SerializedClientPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.http.SerializedClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedClientPacket::CopyFrom(const SerializedClientPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.http.SerializedClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedClientPacket::IsInitialized() const {
  return true;
}

void SerializedClientPacket::Swap(SerializedClientPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedClientPacket::InternalSwap(SerializedClientPacket* other) {
  using std::swap;
  headers_.InternalSwap(&other->headers_);
  body_.Swap(&other->body_);
  swap(status_, other->status_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedClientPacket::GetMetadata() const {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedClientPacket

// uint32 status = 1;
void SerializedClientPacket::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 SerializedClientPacket::status() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.status)
  return status_;
}
void SerializedClientPacket::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedClientPacket.status)
}

// uint32 version = 2;
void SerializedClientPacket::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 SerializedClientPacket::version() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.version)
  return version_;
}
void SerializedClientPacket::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedClientPacket.version)
}

// repeated .flare.http.HeaderField headers = 3;
int SerializedClientPacket::headers_size() const {
  return headers_.size();
}
void SerializedClientPacket::clear_headers() {
  headers_.Clear();
}
const ::flare::http::HeaderField& SerializedClientPacket::headers(int index) const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.headers)
  return headers_.Get(index);
}
::flare::http::HeaderField* SerializedClientPacket::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedClientPacket.headers)
  return headers_.Mutable(index);
}
::flare::http::HeaderField* SerializedClientPacket::add_headers() {
  // @@protoc_insertion_point(field_add:flare.http.SerializedClientPacket.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >*
SerializedClientPacket::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:flare.http.SerializedClientPacket.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >&
SerializedClientPacket::headers() const {
  // @@protoc_insertion_point(field_list:flare.http.SerializedClientPacket.headers)
  return headers_;
}

// bytes body = 4;
void SerializedClientPacket::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedClientPacket::body() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.body)
  return body_.GetNoArena();
}
void SerializedClientPacket::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.SerializedClientPacket.body)
}
#if LANG_CXX11
void SerializedClientPacket::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.SerializedClientPacket.body)
}
#endif
void SerializedClientPacket::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.SerializedClientPacket.body)
}
void SerializedClientPacket::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.SerializedClientPacket.body)
}
::std::string* SerializedClientPacket::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedClientPacket.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedClientPacket::release_body() {
  // @@protoc_insertion_point(field_release:flare.http.SerializedClientPacket.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedClientPacket::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:flare.http.SerializedClientPacket.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedServerPacket::kMethodFieldNumber;
const int SerializedServerPacket::kUriFieldNumber;
const int SerializedServerPacket::kVersionFieldNumber;
const int SerializedServerPacket::kHeadersFieldNumber;
const int SerializedServerPacket::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedServerPacket::SerializedServerPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.http.SerializedServerPacket)
}
SerializedServerPacket::SerializedServerPacket(const SerializedServerPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ::memcpy(&method_, &from.method_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&method_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:flare.http.SerializedServerPacket)
}

void SerializedServerPacket::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&method_)) + sizeof(version_));
  _cached_size_ = 0;
}

SerializedServerPacket::~SerializedServerPacket() {
  // @@protoc_insertion_point(destructor:flare.http.SerializedServerPacket)
  SharedDtor();
}

void SerializedServerPacket::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerializedServerPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedServerPacket::descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerializedServerPacket& SerializedServerPacket::default_instance() {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerializedServerPacket* SerializedServerPacket::New(::google::protobuf::Arena* arena) const {
  SerializedServerPacket* n = new SerializedServerPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedServerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.http.SerializedServerPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&method_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool SerializedServerPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.http.SerializedServerPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.http.SerializedServerPacket.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flare.http.HeaderField headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.http.SerializedServerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.http.SerializedServerPacket)
  return false;
#undef DO_
}

void SerializedServerPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.http.SerializedServerPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->method(), output);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.http.SerializedServerPacket.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // repeated .flare.http.HeaderField headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(static_cast<int>(i)), output);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.http.SerializedServerPacket)
}

::google::protobuf::uint8* SerializedServerPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.http.SerializedServerPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 method = 1;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->method(), target);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.http.SerializedServerPacket.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // repeated .flare.http.HeaderField headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->headers(static_cast<int>(i)), deterministic, target);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.http.SerializedServerPacket)
  return target;
}

size_t SerializedServerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.http.SerializedServerPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flare.http.HeaderField headers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(static_cast<int>(i)));
    }
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // int32 method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method());
  }

  // int32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedServerPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.http.SerializedServerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedServerPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedServerPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.http.SerializedServerPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.http.SerializedServerPacket)
    MergeFrom(*source);
  }
}

void SerializedServerPacket::MergeFrom(const SerializedServerPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.http.SerializedServerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void SerializedServerPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.http.SerializedServerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedServerPacket::CopyFrom(const SerializedServerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.http.SerializedServerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedServerPacket::IsInitialized() const {
  return true;
}

void SerializedServerPacket::Swap(SerializedServerPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedServerPacket::InternalSwap(SerializedServerPacket* other) {
  using std::swap;
  headers_.InternalSwap(&other->headers_);
  uri_.Swap(&other->uri_);
  body_.Swap(&other->body_);
  swap(method_, other->method_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedServerPacket::GetMetadata() const {
  protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedServerPacket

// int32 method = 1;
void SerializedServerPacket::clear_method() {
  method_ = 0;
}
::google::protobuf::int32 SerializedServerPacket::method() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.method)
  return method_;
}
void SerializedServerPacket::set_method(::google::protobuf::int32 value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.method)
}

// string uri = 2;
void SerializedServerPacket::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedServerPacket::uri() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.uri)
  return uri_.GetNoArena();
}
void SerializedServerPacket::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.uri)
}
#if LANG_CXX11
void SerializedServerPacket::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.SerializedServerPacket.uri)
}
#endif
void SerializedServerPacket::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.SerializedServerPacket.uri)
}
void SerializedServerPacket::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.SerializedServerPacket.uri)
}
::std::string* SerializedServerPacket::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedServerPacket.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedServerPacket::release_uri() {
  // @@protoc_insertion_point(field_release:flare.http.SerializedServerPacket.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedServerPacket::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:flare.http.SerializedServerPacket.uri)
}

// int32 version = 5;
void SerializedServerPacket::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 SerializedServerPacket::version() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.version)
  return version_;
}
void SerializedServerPacket::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.version)
}

// repeated .flare.http.HeaderField headers = 3;
int SerializedServerPacket::headers_size() const {
  return headers_.size();
}
void SerializedServerPacket::clear_headers() {
  headers_.Clear();
}
const ::flare::http::HeaderField& SerializedServerPacket::headers(int index) const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.headers)
  return headers_.Get(index);
}
::flare::http::HeaderField* SerializedServerPacket::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedServerPacket.headers)
  return headers_.Mutable(index);
}
::flare::http::HeaderField* SerializedServerPacket::add_headers() {
  // @@protoc_insertion_point(field_add:flare.http.SerializedServerPacket.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >*
SerializedServerPacket::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:flare.http.SerializedServerPacket.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >&
SerializedServerPacket::headers() const {
  // @@protoc_insertion_point(field_list:flare.http.SerializedServerPacket.headers)
  return headers_;
}

// bytes body = 4;
void SerializedServerPacket::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedServerPacket::body() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.body)
  return body_.GetNoArena();
}
void SerializedServerPacket::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.body)
}
#if LANG_CXX11
void SerializedServerPacket::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.SerializedServerPacket.body)
}
#endif
void SerializedServerPacket::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.SerializedServerPacket.body)
}
void SerializedServerPacket::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.SerializedServerPacket.body)
}
::std::string* SerializedServerPacket::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedServerPacket.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedServerPacket::release_body() {
  // @@protoc_insertion_point(field_release:flare.http.SerializedServerPacket.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedServerPacket::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:flare.http.SerializedServerPacket.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace http
}  // namespace flare

// @@protoc_insertion_point(global_scope)

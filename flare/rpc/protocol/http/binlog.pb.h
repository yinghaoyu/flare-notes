// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flare/rpc/protocol/http/binlog.proto

#ifndef PROTOBUF_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto__INCLUDED
#define PROTOBUF_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace flare {
namespace http {
class HeaderField;
class HeaderFieldDefaultTypeInternal;
extern HeaderFieldDefaultTypeInternal _HeaderField_default_instance_;
class SerializedClientPacket;
class SerializedClientPacketDefaultTypeInternal;
extern SerializedClientPacketDefaultTypeInternal _SerializedClientPacket_default_instance_;
class SerializedServerPacket;
class SerializedServerPacketDefaultTypeInternal;
extern SerializedServerPacketDefaultTypeInternal _SerializedServerPacket_default_instance_;
}  // namespace http
}  // namespace flare

namespace flare {
namespace http {

namespace protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto

// ===================================================================

class HeaderField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flare.http.HeaderField) */ {
 public:
  HeaderField();
  virtual ~HeaderField();

  HeaderField(const HeaderField& from);

  inline HeaderField& operator=(const HeaderField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderField(HeaderField&& from) noexcept
    : HeaderField() {
    *this = ::std::move(from);
  }

  inline HeaderField& operator=(HeaderField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderField& default_instance();

  static inline const HeaderField* internal_default_instance() {
    return reinterpret_cast<const HeaderField*>(
               &_HeaderField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HeaderField* other);
  friend void swap(HeaderField& a, HeaderField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderField* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderField& from);
  void MergeFrom(const HeaderField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:flare.http.HeaderField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedClientPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flare.http.SerializedClientPacket) */ {
 public:
  SerializedClientPacket();
  virtual ~SerializedClientPacket();

  SerializedClientPacket(const SerializedClientPacket& from);

  inline SerializedClientPacket& operator=(const SerializedClientPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerializedClientPacket(SerializedClientPacket&& from) noexcept
    : SerializedClientPacket() {
    *this = ::std::move(from);
  }

  inline SerializedClientPacket& operator=(SerializedClientPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedClientPacket& default_instance();

  static inline const SerializedClientPacket* internal_default_instance() {
    return reinterpret_cast<const SerializedClientPacket*>(
               &_SerializedClientPacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SerializedClientPacket* other);
  friend void swap(SerializedClientPacket& a, SerializedClientPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializedClientPacket* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedClientPacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedClientPacket& from);
  void MergeFrom(const SerializedClientPacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedClientPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flare.http.HeaderField headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::flare::http::HeaderField& headers(int index) const;
  ::flare::http::HeaderField* mutable_headers(int index);
  ::flare::http::HeaderField* add_headers();
  ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >&
      headers() const;

  // bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flare.http.SerializedClientPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField > headers_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 version_;
  mutable int _cached_size_;
  friend struct protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedServerPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flare.http.SerializedServerPacket) */ {
 public:
  SerializedServerPacket();
  virtual ~SerializedServerPacket();

  SerializedServerPacket(const SerializedServerPacket& from);

  inline SerializedServerPacket& operator=(const SerializedServerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerializedServerPacket(SerializedServerPacket&& from) noexcept
    : SerializedServerPacket() {
    *this = ::std::move(from);
  }

  inline SerializedServerPacket& operator=(SerializedServerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedServerPacket& default_instance();

  static inline const SerializedServerPacket* internal_default_instance() {
    return reinterpret_cast<const SerializedServerPacket*>(
               &_SerializedServerPacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SerializedServerPacket* other);
  friend void swap(SerializedServerPacket& a, SerializedServerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializedServerPacket* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedServerPacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedServerPacket& from);
  void MergeFrom(const SerializedServerPacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedServerPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flare.http.HeaderField headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::flare::http::HeaderField& headers(int index) const;
  ::flare::http::HeaderField* mutable_headers(int index);
  ::flare::http::HeaderField* add_headers();
  ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >&
      headers() const;

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // int32 method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::google::protobuf::int32 method() const;
  void set_method(::google::protobuf::int32 value);

  // int32 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:flare.http.SerializedServerPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField > headers_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 method_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend struct protobuf_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeaderField

// string key = 1;
inline void HeaderField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderField::key() const {
  // @@protoc_insertion_point(field_get:flare.http.HeaderField.key)
  return key_.GetNoArena();
}
inline void HeaderField::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.HeaderField.key)
}
#if LANG_CXX11
inline void HeaderField::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.HeaderField.key)
}
#endif
inline void HeaderField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.HeaderField.key)
}
inline void HeaderField::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.HeaderField.key)
}
inline ::std::string* HeaderField::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.HeaderField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderField::release_key() {
  // @@protoc_insertion_point(field_release:flare.http.HeaderField.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:flare.http.HeaderField.key)
}

// string value = 2;
inline void HeaderField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderField::value() const {
  // @@protoc_insertion_point(field_get:flare.http.HeaderField.value)
  return value_.GetNoArena();
}
inline void HeaderField::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.HeaderField.value)
}
#if LANG_CXX11
inline void HeaderField::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.HeaderField.value)
}
#endif
inline void HeaderField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.HeaderField.value)
}
inline void HeaderField::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.HeaderField.value)
}
inline ::std::string* HeaderField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.HeaderField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderField::release_value() {
  // @@protoc_insertion_point(field_release:flare.http.HeaderField.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:flare.http.HeaderField.value)
}

// -------------------------------------------------------------------

// SerializedClientPacket

// uint32 status = 1;
inline void SerializedClientPacket::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 SerializedClientPacket::status() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.status)
  return status_;
}
inline void SerializedClientPacket::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedClientPacket.status)
}

// uint32 version = 2;
inline void SerializedClientPacket::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 SerializedClientPacket::version() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.version)
  return version_;
}
inline void SerializedClientPacket::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedClientPacket.version)
}

// repeated .flare.http.HeaderField headers = 3;
inline int SerializedClientPacket::headers_size() const {
  return headers_.size();
}
inline void SerializedClientPacket::clear_headers() {
  headers_.Clear();
}
inline const ::flare::http::HeaderField& SerializedClientPacket::headers(int index) const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.headers)
  return headers_.Get(index);
}
inline ::flare::http::HeaderField* SerializedClientPacket::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedClientPacket.headers)
  return headers_.Mutable(index);
}
inline ::flare::http::HeaderField* SerializedClientPacket::add_headers() {
  // @@protoc_insertion_point(field_add:flare.http.SerializedClientPacket.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >*
SerializedClientPacket::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:flare.http.SerializedClientPacket.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >&
SerializedClientPacket::headers() const {
  // @@protoc_insertion_point(field_list:flare.http.SerializedClientPacket.headers)
  return headers_;
}

// bytes body = 4;
inline void SerializedClientPacket::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerializedClientPacket::body() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedClientPacket.body)
  return body_.GetNoArena();
}
inline void SerializedClientPacket::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.SerializedClientPacket.body)
}
#if LANG_CXX11
inline void SerializedClientPacket::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.SerializedClientPacket.body)
}
#endif
inline void SerializedClientPacket::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.SerializedClientPacket.body)
}
inline void SerializedClientPacket::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.SerializedClientPacket.body)
}
inline ::std::string* SerializedClientPacket::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedClientPacket.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerializedClientPacket::release_body() {
  // @@protoc_insertion_point(field_release:flare.http.SerializedClientPacket.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedClientPacket::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:flare.http.SerializedClientPacket.body)
}

// -------------------------------------------------------------------

// SerializedServerPacket

// int32 method = 1;
inline void SerializedServerPacket::clear_method() {
  method_ = 0;
}
inline ::google::protobuf::int32 SerializedServerPacket::method() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.method)
  return method_;
}
inline void SerializedServerPacket::set_method(::google::protobuf::int32 value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.method)
}

// string uri = 2;
inline void SerializedServerPacket::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerializedServerPacket::uri() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.uri)
  return uri_.GetNoArena();
}
inline void SerializedServerPacket::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.uri)
}
#if LANG_CXX11
inline void SerializedServerPacket::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.SerializedServerPacket.uri)
}
#endif
inline void SerializedServerPacket::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.SerializedServerPacket.uri)
}
inline void SerializedServerPacket::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.SerializedServerPacket.uri)
}
inline ::std::string* SerializedServerPacket::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedServerPacket.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerializedServerPacket::release_uri() {
  // @@protoc_insertion_point(field_release:flare.http.SerializedServerPacket.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedServerPacket::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:flare.http.SerializedServerPacket.uri)
}

// int32 version = 5;
inline void SerializedServerPacket::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 SerializedServerPacket::version() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.version)
  return version_;
}
inline void SerializedServerPacket::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.version)
}

// repeated .flare.http.HeaderField headers = 3;
inline int SerializedServerPacket::headers_size() const {
  return headers_.size();
}
inline void SerializedServerPacket::clear_headers() {
  headers_.Clear();
}
inline const ::flare::http::HeaderField& SerializedServerPacket::headers(int index) const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.headers)
  return headers_.Get(index);
}
inline ::flare::http::HeaderField* SerializedServerPacket::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedServerPacket.headers)
  return headers_.Mutable(index);
}
inline ::flare::http::HeaderField* SerializedServerPacket::add_headers() {
  // @@protoc_insertion_point(field_add:flare.http.SerializedServerPacket.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >*
SerializedServerPacket::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:flare.http.SerializedServerPacket.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flare::http::HeaderField >&
SerializedServerPacket::headers() const {
  // @@protoc_insertion_point(field_list:flare.http.SerializedServerPacket.headers)
  return headers_;
}

// bytes body = 4;
inline void SerializedServerPacket::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerializedServerPacket::body() const {
  // @@protoc_insertion_point(field_get:flare.http.SerializedServerPacket.body)
  return body_.GetNoArena();
}
inline void SerializedServerPacket::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.http.SerializedServerPacket.body)
}
#if LANG_CXX11
inline void SerializedServerPacket::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.http.SerializedServerPacket.body)
}
#endif
inline void SerializedServerPacket::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.http.SerializedServerPacket.body)
}
inline void SerializedServerPacket::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.http.SerializedServerPacket.body)
}
inline ::std::string* SerializedServerPacket::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:flare.http.SerializedServerPacket.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerializedServerPacket::release_body() {
  // @@protoc_insertion_point(field_release:flare.http.SerializedServerPacket.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedServerPacket::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:flare.http.SerializedServerPacket.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace http
}  // namespace flare

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flare_2frpc_2fprotocol_2fhttp_2fbinlog_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flare/rpc/protocol/protobuf/poppy_rpc_meta.proto

#ifndef PROTOBUF_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto__INCLUDED
#define PROTOBUF_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace poppy {
class RpcMeta;
class RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
}  // namespace poppy

namespace poppy {

namespace protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto

enum RpcMeta_Type {
  RpcMeta_Type_REQUEST = 0,
  RpcMeta_Type_RESPONSE = 1
};
bool RpcMeta_Type_IsValid(int value);
const RpcMeta_Type RpcMeta_Type_Type_MIN = RpcMeta_Type_REQUEST;
const RpcMeta_Type RpcMeta_Type_Type_MAX = RpcMeta_Type_RESPONSE;
const int RpcMeta_Type_Type_ARRAYSIZE = RpcMeta_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcMeta_Type_descriptor();
inline const ::std::string& RpcMeta_Type_Name(RpcMeta_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcMeta_Type_descriptor(), value);
}
inline bool RpcMeta_Type_Parse(
    const ::std::string& name, RpcMeta_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcMeta_Type>(
    RpcMeta_Type_descriptor(), name, value);
}
enum CompressType {
  COMPRESS_TYPE_NONE = 0,
  COMPRESS_TYPE_SNAPPY = 1
};
bool CompressType_IsValid(int value);
const CompressType CompressType_MIN = COMPRESS_TYPE_NONE;
const CompressType CompressType_MAX = COMPRESS_TYPE_SNAPPY;
const int CompressType_ARRAYSIZE = CompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressType_descriptor();
inline const ::std::string& CompressType_Name(CompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressType_descriptor(), value);
}
inline bool CompressType_Parse(
    const ::std::string& name, CompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressType>(
    CompressType_descriptor(), name, value);
}
// ===================================================================

class RpcMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poppy.RpcMeta) */ {
 public:
  RpcMeta();
  virtual ~RpcMeta();

  RpcMeta(const RpcMeta& from);

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMeta& default_instance();

  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RpcMeta* other);
  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RpcMeta_Type Type;
  static const Type REQUEST =
    RpcMeta_Type_REQUEST;
  static const Type RESPONSE =
    RpcMeta_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return RpcMeta_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RpcMeta_Type_Type_MIN;
  static const Type Type_MAX =
    RpcMeta_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RpcMeta_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RpcMeta_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RpcMeta_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RpcMeta_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string method = 100;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 100;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional string reason = 203;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 203;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // required int64 sequence_id = 2;
  bool has_sequence_id() const;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 2;
  ::google::protobuf::int64 sequence_id() const;
  void set_sequence_id(::google::protobuf::int64 value);

  // optional .poppy.CompressType expected_response_compress_type = 205;
  bool has_expected_response_compress_type() const;
  void clear_expected_response_compress_type();
  static const int kExpectedResponseCompressTypeFieldNumber = 205;
  ::poppy::CompressType expected_response_compress_type() const;
  void set_expected_response_compress_type(::poppy::CompressType value);

  // optional int64 timeout = 101;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 101;
  ::google::protobuf::int64 timeout() const;
  void set_timeout(::google::protobuf::int64 value);

  // optional .poppy.RpcMeta.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::poppy::RpcMeta_Type type() const;
  void set_type(::poppy::RpcMeta_Type value);

  // optional bool failed = 200;
  bool has_failed() const;
  void clear_failed();
  static const int kFailedFieldNumber = 200;
  bool failed() const;
  void set_failed(bool value);

  // optional bool canceled = 201;
  bool has_canceled() const;
  void clear_canceled();
  static const int kCanceledFieldNumber = 201;
  bool canceled() const;
  void set_canceled(bool value);

  // optional int32 error_code = 202;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 202;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional .poppy.CompressType compress_type = 204;
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 204;
  ::poppy::CompressType compress_type() const;
  void set_compress_type(::poppy::CompressType value);

  // @@protoc_insertion_point(class_scope:poppy.RpcMeta)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_sequence_id();
  void clear_has_sequence_id();
  void set_has_method();
  void clear_has_method();
  void set_has_timeout();
  void clear_has_timeout();
  void set_has_failed();
  void clear_has_failed();
  void set_has_canceled();
  void clear_has_canceled();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_reason();
  void clear_has_reason();
  void set_has_compress_type();
  void clear_has_compress_type();
  void set_has_expected_response_compress_type();
  void clear_has_expected_response_compress_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int64 sequence_id_;
  int expected_response_compress_type_;
  ::google::protobuf::int64 timeout_;
  int type_;
  bool failed_;
  bool canceled_;
  ::google::protobuf::int32 error_code_;
  int compress_type_;
  friend struct protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcMeta

// optional .poppy.RpcMeta.Type type = 1;
inline bool RpcMeta::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMeta::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMeta::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::poppy::RpcMeta_Type RpcMeta::type() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.type)
  return static_cast< ::poppy::RpcMeta_Type >(type_);
}
inline void RpcMeta::set_type(::poppy::RpcMeta_Type value) {
  assert(::poppy::RpcMeta_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.type)
}

// required int64 sequence_id = 2;
inline bool RpcMeta::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMeta::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMeta::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMeta::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
inline ::google::protobuf::int64 RpcMeta::sequence_id() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.sequence_id)
  return sequence_id_;
}
inline void RpcMeta::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.sequence_id)
}

// optional string method = 100;
inline bool RpcMeta::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMeta::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMeta::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMeta::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& RpcMeta::method() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.method)
  return method_.GetNoArena();
}
inline void RpcMeta::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.method)
}
#if LANG_CXX11
inline void RpcMeta::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poppy.RpcMeta.method)
}
#endif
inline void RpcMeta::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poppy.RpcMeta.method)
}
inline void RpcMeta::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poppy.RpcMeta.method)
}
inline ::std::string* RpcMeta::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:poppy.RpcMeta.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMeta::release_method() {
  // @@protoc_insertion_point(field_release:poppy.RpcMeta.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMeta::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:poppy.RpcMeta.method)
}

// optional int64 timeout = 101;
inline bool RpcMeta::has_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMeta::set_has_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMeta::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMeta::clear_timeout() {
  timeout_ = GOOGLE_LONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::int64 RpcMeta::timeout() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.timeout)
  return timeout_;
}
inline void RpcMeta::set_timeout(::google::protobuf::int64 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.timeout)
}

// optional bool failed = 200;
inline bool RpcMeta::has_failed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpcMeta::set_has_failed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpcMeta::clear_has_failed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpcMeta::clear_failed() {
  failed_ = false;
  clear_has_failed();
}
inline bool RpcMeta::failed() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.failed)
  return failed_;
}
inline void RpcMeta::set_failed(bool value) {
  set_has_failed();
  failed_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.failed)
}

// optional bool canceled = 201;
inline bool RpcMeta::has_canceled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RpcMeta::set_has_canceled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RpcMeta::clear_has_canceled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RpcMeta::clear_canceled() {
  canceled_ = false;
  clear_has_canceled();
}
inline bool RpcMeta::canceled() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.canceled)
  return canceled_;
}
inline void RpcMeta::set_canceled(bool value) {
  set_has_canceled();
  canceled_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.canceled)
}

// optional int32 error_code = 202;
inline bool RpcMeta::has_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RpcMeta::set_has_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RpcMeta::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RpcMeta::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 RpcMeta::error_code() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.error_code)
  return error_code_;
}
inline void RpcMeta::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.error_code)
}

// optional string reason = 203;
inline bool RpcMeta::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMeta::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMeta::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMeta::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& RpcMeta::reason() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.reason)
  return reason_.GetNoArena();
}
inline void RpcMeta::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.reason)
}
#if LANG_CXX11
inline void RpcMeta::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poppy.RpcMeta.reason)
}
#endif
inline void RpcMeta::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poppy.RpcMeta.reason)
}
inline void RpcMeta::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poppy.RpcMeta.reason)
}
inline ::std::string* RpcMeta::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:poppy.RpcMeta.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMeta::release_reason() {
  // @@protoc_insertion_point(field_release:poppy.RpcMeta.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMeta::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:poppy.RpcMeta.reason)
}

// optional .poppy.CompressType compress_type = 204;
inline bool RpcMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RpcMeta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RpcMeta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
inline ::poppy::CompressType RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.compress_type)
  return static_cast< ::poppy::CompressType >(compress_type_);
}
inline void RpcMeta::set_compress_type(::poppy::CompressType value) {
  assert(::poppy::CompressType_IsValid(value));
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.compress_type)
}

// optional .poppy.CompressType expected_response_compress_type = 205;
inline bool RpcMeta::has_expected_response_compress_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMeta::set_has_expected_response_compress_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMeta::clear_has_expected_response_compress_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMeta::clear_expected_response_compress_type() {
  expected_response_compress_type_ = 0;
  clear_has_expected_response_compress_type();
}
inline ::poppy::CompressType RpcMeta::expected_response_compress_type() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.expected_response_compress_type)
  return static_cast< ::poppy::CompressType >(expected_response_compress_type_);
}
inline void RpcMeta::set_expected_response_compress_type(::poppy::CompressType value) {
  assert(::poppy::CompressType_IsValid(value));
  set_has_expected_response_compress_type();
  expected_response_compress_type_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.expected_response_compress_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace poppy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::poppy::RpcMeta_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::poppy::RpcMeta_Type>() {
  return ::poppy::RpcMeta_Type_descriptor();
}
template <> struct is_proto_enum< ::poppy::CompressType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::poppy::CompressType>() {
  return ::poppy::CompressType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_meta.proto

#ifndef PROTOBUF_INCLUDED_rpc_5fmeta_2eproto
#define PROTOBUF_INCLUDED_rpc_5fmeta_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rpc_5fmeta_2eproto 

namespace protobuf_rpc_5fmeta_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rpc_5fmeta_2eproto
namespace flare {
namespace rpc {
class RpcMeta;
class RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
class RpcRequestMeta;
class RpcRequestMetaDefaultTypeInternal;
extern RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
class RpcResponseMeta;
class RpcResponseMetaDefaultTypeInternal;
extern RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
}  // namespace rpc
}  // namespace flare
namespace google {
namespace protobuf {
template<> ::flare::rpc::RpcMeta* Arena::CreateMaybeMessage<::flare::rpc::RpcMeta>(Arena*);
template<> ::flare::rpc::RpcRequestMeta* Arena::CreateMaybeMessage<::flare::rpc::RpcRequestMeta>(Arena*);
template<> ::flare::rpc::RpcResponseMeta* Arena::CreateMaybeMessage<::flare::rpc::RpcResponseMeta>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flare {
namespace rpc {

enum Status {
  STATUS_SUCCESS = 0,
  STATUS_CHANNEL_SHUTDOWN = 1,
  STATUS_FAIL_TO_CONNECT = 2,
  STATUS_SERIALIZE_REQUEST = 4,
  STATUS_PARSE_REQUEST = 5,
  STATUS_SERIALIZE_RESPONSE = 6,
  STATUS_PARSE_RESPONSE = 7,
  STATUS_INVALID_METHOD_NAME = 8,
  STATUS_INVALID_TRANSFER_MODE = 12,
  STATUS_FROM_USER_FEEDBACK = 13,
  STATUS_OUT_OF_SERVICE = 14,
  STATUS_GET_ROUTE = 15,
  STATUS_GET_ROUTE_ALL_DISABLED = 17,
  STATUS_FROM_USER = 100,
  STATUS_TIMEOUT = 3,
  STATUS_OVERLOADED = 11,
  STATUS_SERVICE_NOT_FOUND = 9,
  STATUS_METHOD_NOT_FOUND = 10,
  STATUS_NO_PEER = 16,
  STATUS_FAILED = 99,
  STATUS_NOT_SUPPORTED = 101,
  STATUS_MALFORMED_DATA = 102,
  STATUS_INVALID_CHANNEL = 103,
  STATUS_IO_ERROR = 104,
  STATUS_RESERVED_MAX = 1000
};
bool Status_IsValid(int value);
const Status Status_MIN = STATUS_SUCCESS;
const Status Status_MAX = STATUS_RESERVED_MAX;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum MethodType {
  METHOD_TYPE_UNKNOWN = 0,
  METHOD_TYPE_SINGLE = 1,
  METHOD_TYPE_STREAM = 2
};
bool MethodType_IsValid(int value);
const MethodType MethodType_MIN = METHOD_TYPE_UNKNOWN;
const MethodType MethodType_MAX = METHOD_TYPE_STREAM;
const int MethodType_ARRAYSIZE = MethodType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MethodType_descriptor();
inline const ::std::string& MethodType_Name(MethodType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MethodType_descriptor(), value);
}
inline bool MethodType_Parse(
    const ::std::string& name, MethodType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MethodType>(
    MethodType_descriptor(), name, value);
}
enum MessageFlags {
  MESSAGE_FLAGS_UNKNOWN = 0,
  MESSAGE_FLAGS_START_OF_STREAM = 1,
  MESSAGE_FLAGS_END_OF_STREAM = 2,
  MESSAGE_FLAGS_NO_PAYLOAD = 4
};
bool MessageFlags_IsValid(int value);
const MessageFlags MessageFlags_MIN = MESSAGE_FLAGS_UNKNOWN;
const MessageFlags MessageFlags_MAX = MESSAGE_FLAGS_NO_PAYLOAD;
const int MessageFlags_ARRAYSIZE = MessageFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageFlags_descriptor();
inline const ::std::string& MessageFlags_Name(MessageFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageFlags_descriptor(), value);
}
inline bool MessageFlags_Parse(
    const ::std::string& name, MessageFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageFlags>(
    MessageFlags_descriptor(), name, value);
}
enum CompressionAlgorithm {
  COMPRESSION_ALGORITHM_UNKNOWN = 0,
  COMPRESSION_ALGORITHM_NONE = 1,
  COMPRESSION_ALGORITHM_GZIP = 2,
  COMPRESSION_ALGORITHM_LZ4_FRAME = 3,
  COMPRESSION_ALGORITHM_SNAPPY = 4,
  COMPRESSION_ALGORITHM_ZSTD = 5
};
bool CompressionAlgorithm_IsValid(int value);
const CompressionAlgorithm CompressionAlgorithm_MIN = COMPRESSION_ALGORITHM_UNKNOWN;
const CompressionAlgorithm CompressionAlgorithm_MAX = COMPRESSION_ALGORITHM_ZSTD;
const int CompressionAlgorithm_ARRAYSIZE = CompressionAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressionAlgorithm_descriptor();
inline const ::std::string& CompressionAlgorithm_Name(CompressionAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressionAlgorithm_descriptor(), value);
}
inline bool CompressionAlgorithm_Parse(
    const ::std::string& name, CompressionAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressionAlgorithm>(
    CompressionAlgorithm_descriptor(), name, value);
}
// ===================================================================

class RpcRequestMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flare.rpc.RpcRequestMeta) */ {
 public:
  RpcRequestMeta();
  virtual ~RpcRequestMeta();

  RpcRequestMeta(const RpcRequestMeta& from);

  inline RpcRequestMeta& operator=(const RpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcRequestMeta(RpcRequestMeta&& from) noexcept
    : RpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline RpcRequestMeta& operator=(RpcRequestMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequestMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const RpcRequestMeta*>(
               &_RpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpcRequestMeta* other);
  friend void swap(RpcRequestMeta& a, RpcRequestMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcRequestMeta* New() const final {
    return CreateMaybeMessage<RpcRequestMeta>(NULL);
  }

  RpcRequestMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcRequestMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcRequestMeta& from);
  void MergeFrom(const RpcRequestMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string method_name = 2;
  bool has_method_name() const;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // optional bytes tracing_context = 5;
  bool has_tracing_context() const;
  void clear_tracing_context();
  static const int kTracingContextFieldNumber = 5;
  const ::std::string& tracing_context() const;
  void set_tracing_context(const ::std::string& value);
  #if LANG_CXX11
  void set_tracing_context(::std::string&& value);
  #endif
  void set_tracing_context(const char* value);
  void set_tracing_context(const void* value, size_t size);
  ::std::string* mutable_tracing_context();
  ::std::string* release_tracing_context();
  void set_allocated_tracing_context(::std::string* tracing_context);

  // optional uint32 request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // optional uint32 timeout = 4;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  ::google::protobuf::uint32 timeout() const;
  void set_timeout(::google::protobuf::uint32 value);

  // optional uint64 acceptable_compression_algorithms = 6;
  bool has_acceptable_compression_algorithms() const;
  void clear_acceptable_compression_algorithms();
  static const int kAcceptableCompressionAlgorithmsFieldNumber = 6;
  ::google::protobuf::uint64 acceptable_compression_algorithms() const;
  void set_acceptable_compression_algorithms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:flare.rpc.RpcRequestMeta)
 private:
  void set_has_method_name();
  void clear_has_method_name();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_timeout();
  void clear_has_timeout();
  void set_has_tracing_context();
  void clear_has_tracing_context();
  void set_has_acceptable_compression_algorithms();
  void clear_has_acceptable_compression_algorithms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr tracing_context_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 timeout_;
  ::google::protobuf::uint64 acceptable_compression_algorithms_;
  friend struct ::protobuf_rpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcResponseMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flare.rpc.RpcResponseMeta) */ {
 public:
  RpcResponseMeta();
  virtual ~RpcResponseMeta();

  RpcResponseMeta(const RpcResponseMeta& from);

  inline RpcResponseMeta& operator=(const RpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcResponseMeta(RpcResponseMeta&& from) noexcept
    : RpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline RpcResponseMeta& operator=(RpcResponseMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponseMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const RpcResponseMeta*>(
               &_RpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RpcResponseMeta* other);
  friend void swap(RpcResponseMeta& a, RpcResponseMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcResponseMeta* New() const final {
    return CreateMaybeMessage<RpcResponseMeta>(NULL);
  }

  RpcResponseMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcResponseMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcResponseMeta& from);
  void MergeFrom(const RpcResponseMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponseMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional bool trace_forcibly_sampled = 3;
  bool has_trace_forcibly_sampled() const;
  void clear_trace_forcibly_sampled();
  static const int kTraceForciblySampledFieldNumber = 3;
  bool trace_forcibly_sampled() const;
  void set_trace_forcibly_sampled(bool value);

  // @@protoc_insertion_point(class_scope:flare.rpc.RpcResponseMeta)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_description();
  void clear_has_description();
  void set_has_trace_forcibly_sampled();
  void clear_has_trace_forcibly_sampled();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 status_;
  bool trace_forcibly_sampled_;
  friend struct ::protobuf_rpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flare.rpc.RpcMeta) */ {
 public:
  RpcMeta();
  virtual ~RpcMeta();

  RpcMeta(const RpcMeta& from);

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RpcMeta* other);
  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta* New() const final {
    return CreateMaybeMessage<RpcMeta>(NULL);
  }

  RpcMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .flare.rpc.RpcRequestMeta request_meta = 5;
  bool has_request_meta() const;
  void clear_request_meta();
  static const int kRequestMetaFieldNumber = 5;
  private:
  const ::flare::rpc::RpcRequestMeta& _internal_request_meta() const;
  public:
  const ::flare::rpc::RpcRequestMeta& request_meta() const;
  ::flare::rpc::RpcRequestMeta* release_request_meta();
  ::flare::rpc::RpcRequestMeta* mutable_request_meta();
  void set_allocated_request_meta(::flare::rpc::RpcRequestMeta* request_meta);

  // optional .flare.rpc.RpcResponseMeta response_meta = 6;
  bool has_response_meta() const;
  void clear_response_meta();
  static const int kResponseMetaFieldNumber = 6;
  private:
  const ::flare::rpc::RpcResponseMeta& _internal_response_meta() const;
  public:
  const ::flare::rpc::RpcResponseMeta& response_meta() const;
  ::flare::rpc::RpcResponseMeta* release_response_meta();
  ::flare::rpc::RpcResponseMeta* mutable_response_meta();
  void set_allocated_response_meta(::flare::rpc::RpcResponseMeta* response_meta);

  // required uint64 correlation_id = 1;
  bool has_correlation_id() const;
  void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 1;
  ::google::protobuf::uint64 correlation_id() const;
  void set_correlation_id(::google::protobuf::uint64 value);

  // optional uint64 flags = 8;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 8;
  ::google::protobuf::uint64 flags() const;
  void set_flags(::google::protobuf::uint64 value);

  // required .flare.rpc.MethodType method_type = 7;
  bool has_method_type() const;
  void clear_method_type();
  static const int kMethodTypeFieldNumber = 7;
  ::flare::rpc::MethodType method_type() const;
  void set_method_type(::flare::rpc::MethodType value);

  // optional .flare.rpc.CompressionAlgorithm compression_algorithm = 9;
  bool has_compression_algorithm() const;
  void clear_compression_algorithm();
  static const int kCompressionAlgorithmFieldNumber = 9;
  ::flare::rpc::CompressionAlgorithm compression_algorithm() const;
  void set_compression_algorithm(::flare::rpc::CompressionAlgorithm value);

  // optional bool attachment_compressed = 10;
  bool has_attachment_compressed() const;
  void clear_attachment_compressed();
  static const int kAttachmentCompressedFieldNumber = 10;
  bool attachment_compressed() const;
  void set_attachment_compressed(bool value);

  // @@protoc_insertion_point(class_scope:flare.rpc.RpcMeta)
 private:
  void set_has_correlation_id();
  void clear_has_correlation_id();
  void set_has_method_type();
  void clear_has_method_type();
  void set_has_flags();
  void clear_has_flags();
  void set_has_compression_algorithm();
  void clear_has_compression_algorithm();
  void set_has_attachment_compressed();
  void clear_has_attachment_compressed();
  void set_has_request_meta();
  void clear_has_request_meta();
  void set_has_response_meta();
  void clear_has_response_meta();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::flare::rpc::RpcRequestMeta* request_meta_;
  ::flare::rpc::RpcResponseMeta* response_meta_;
  ::google::protobuf::uint64 correlation_id_;
  ::google::protobuf::uint64 flags_;
  int method_type_;
  int compression_algorithm_;
  bool attachment_compressed_;
  friend struct ::protobuf_rpc_5fmeta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcRequestMeta

// required string method_name = 2;
inline bool RpcRequestMeta::has_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcRequestMeta::set_has_method_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcRequestMeta::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcRequestMeta::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method_name();
}
inline const ::std::string& RpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcRequestMeta.method_name)
  return method_name_.GetNoArena();
}
inline void RpcRequestMeta::set_method_name(const ::std::string& value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.RpcRequestMeta.method_name)
}
#if LANG_CXX11
inline void RpcRequestMeta::set_method_name(::std::string&& value) {
  set_has_method_name();
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.RpcRequestMeta.method_name)
}
#endif
inline void RpcRequestMeta::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.RpcRequestMeta.method_name)
}
inline void RpcRequestMeta::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.RpcRequestMeta.method_name)
}
inline ::std::string* RpcRequestMeta::mutable_method_name() {
  set_has_method_name();
  // @@protoc_insertion_point(field_mutable:flare.rpc.RpcRequestMeta.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:flare.rpc.RpcRequestMeta.method_name)
  if (!has_method_name()) {
    return NULL;
  }
  clear_has_method_name();
  return method_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequestMeta::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    set_has_method_name();
  } else {
    clear_has_method_name();
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.RpcRequestMeta.method_name)
}

// optional uint32 request_id = 3;
inline bool RpcRequestMeta::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcRequestMeta::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcRequestMeta::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcRequestMeta::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 RpcRequestMeta::request_id() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcRequestMeta.request_id)
  return request_id_;
}
inline void RpcRequestMeta::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcRequestMeta.request_id)
}

// optional uint32 timeout = 4;
inline bool RpcRequestMeta::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcRequestMeta::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcRequestMeta::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcRequestMeta::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 RpcRequestMeta::timeout() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcRequestMeta.timeout)
  return timeout_;
}
inline void RpcRequestMeta::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcRequestMeta.timeout)
}

// optional bytes tracing_context = 5;
inline bool RpcRequestMeta::has_tracing_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcRequestMeta::set_has_tracing_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcRequestMeta::clear_has_tracing_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcRequestMeta::clear_tracing_context() {
  tracing_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracing_context();
}
inline const ::std::string& RpcRequestMeta::tracing_context() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcRequestMeta.tracing_context)
  return tracing_context_.GetNoArena();
}
inline void RpcRequestMeta::set_tracing_context(const ::std::string& value) {
  set_has_tracing_context();
  tracing_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.RpcRequestMeta.tracing_context)
}
#if LANG_CXX11
inline void RpcRequestMeta::set_tracing_context(::std::string&& value) {
  set_has_tracing_context();
  tracing_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.RpcRequestMeta.tracing_context)
}
#endif
inline void RpcRequestMeta::set_tracing_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tracing_context();
  tracing_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.RpcRequestMeta.tracing_context)
}
inline void RpcRequestMeta::set_tracing_context(const void* value, size_t size) {
  set_has_tracing_context();
  tracing_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.RpcRequestMeta.tracing_context)
}
inline ::std::string* RpcRequestMeta::mutable_tracing_context() {
  set_has_tracing_context();
  // @@protoc_insertion_point(field_mutable:flare.rpc.RpcRequestMeta.tracing_context)
  return tracing_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequestMeta::release_tracing_context() {
  // @@protoc_insertion_point(field_release:flare.rpc.RpcRequestMeta.tracing_context)
  if (!has_tracing_context()) {
    return NULL;
  }
  clear_has_tracing_context();
  return tracing_context_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequestMeta::set_allocated_tracing_context(::std::string* tracing_context) {
  if (tracing_context != NULL) {
    set_has_tracing_context();
  } else {
    clear_has_tracing_context();
  }
  tracing_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracing_context);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.RpcRequestMeta.tracing_context)
}

// optional uint64 acceptable_compression_algorithms = 6;
inline bool RpcRequestMeta::has_acceptable_compression_algorithms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcRequestMeta::set_has_acceptable_compression_algorithms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcRequestMeta::clear_has_acceptable_compression_algorithms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcRequestMeta::clear_acceptable_compression_algorithms() {
  acceptable_compression_algorithms_ = GOOGLE_ULONGLONG(0);
  clear_has_acceptable_compression_algorithms();
}
inline ::google::protobuf::uint64 RpcRequestMeta::acceptable_compression_algorithms() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcRequestMeta.acceptable_compression_algorithms)
  return acceptable_compression_algorithms_;
}
inline void RpcRequestMeta::set_acceptable_compression_algorithms(::google::protobuf::uint64 value) {
  set_has_acceptable_compression_algorithms();
  acceptable_compression_algorithms_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcRequestMeta.acceptable_compression_algorithms)
}

// -------------------------------------------------------------------

// RpcResponseMeta

// required int32 status = 1;
inline bool RpcResponseMeta::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResponseMeta::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResponseMeta::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResponseMeta::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RpcResponseMeta::status() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcResponseMeta.status)
  return status_;
}
inline void RpcResponseMeta::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcResponseMeta.status)
}

// optional string description = 2;
inline bool RpcResponseMeta::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResponseMeta::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResponseMeta::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResponseMeta::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& RpcResponseMeta::description() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcResponseMeta.description)
  return description_.GetNoArena();
}
inline void RpcResponseMeta::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.RpcResponseMeta.description)
}
#if LANG_CXX11
inline void RpcResponseMeta::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.RpcResponseMeta.description)
}
#endif
inline void RpcResponseMeta::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.RpcResponseMeta.description)
}
inline void RpcResponseMeta::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.RpcResponseMeta.description)
}
inline ::std::string* RpcResponseMeta::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:flare.rpc.RpcResponseMeta.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcResponseMeta::release_description() {
  // @@protoc_insertion_point(field_release:flare.rpc.RpcResponseMeta.description)
  if (!has_description()) {
    return NULL;
  }
  clear_has_description();
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResponseMeta::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.RpcResponseMeta.description)
}

// optional bool trace_forcibly_sampled = 3;
inline bool RpcResponseMeta::has_trace_forcibly_sampled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcResponseMeta::set_has_trace_forcibly_sampled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcResponseMeta::clear_has_trace_forcibly_sampled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcResponseMeta::clear_trace_forcibly_sampled() {
  trace_forcibly_sampled_ = false;
  clear_has_trace_forcibly_sampled();
}
inline bool RpcResponseMeta::trace_forcibly_sampled() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcResponseMeta.trace_forcibly_sampled)
  return trace_forcibly_sampled_;
}
inline void RpcResponseMeta::set_trace_forcibly_sampled(bool value) {
  set_has_trace_forcibly_sampled();
  trace_forcibly_sampled_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcResponseMeta.trace_forcibly_sampled)
}

// -------------------------------------------------------------------

// RpcMeta

// required uint64 correlation_id = 1;
inline bool RpcMeta::has_correlation_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMeta::set_has_correlation_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMeta::clear_has_correlation_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_ULONGLONG(0);
  clear_has_correlation_id();
}
inline ::google::protobuf::uint64 RpcMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcMeta.correlation_id)
  return correlation_id_;
}
inline void RpcMeta::set_correlation_id(::google::protobuf::uint64 value) {
  set_has_correlation_id();
  correlation_id_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcMeta.correlation_id)
}

// required .flare.rpc.MethodType method_type = 7;
inline bool RpcMeta::has_method_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMeta::set_has_method_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMeta::clear_has_method_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMeta::clear_method_type() {
  method_type_ = 0;
  clear_has_method_type();
}
inline ::flare::rpc::MethodType RpcMeta::method_type() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcMeta.method_type)
  return static_cast< ::flare::rpc::MethodType >(method_type_);
}
inline void RpcMeta::set_method_type(::flare::rpc::MethodType value) {
  assert(::flare::rpc::MethodType_IsValid(value));
  set_has_method_type();
  method_type_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcMeta.method_type)
}

// optional uint64 flags = 8;
inline bool RpcMeta::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMeta::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMeta::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMeta::clear_flags() {
  flags_ = GOOGLE_ULONGLONG(0);
  clear_has_flags();
}
inline ::google::protobuf::uint64 RpcMeta::flags() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcMeta.flags)
  return flags_;
}
inline void RpcMeta::set_flags(::google::protobuf::uint64 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcMeta.flags)
}

// optional .flare.rpc.CompressionAlgorithm compression_algorithm = 9;
inline bool RpcMeta::has_compression_algorithm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMeta::set_has_compression_algorithm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMeta::clear_has_compression_algorithm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMeta::clear_compression_algorithm() {
  compression_algorithm_ = 0;
  clear_has_compression_algorithm();
}
inline ::flare::rpc::CompressionAlgorithm RpcMeta::compression_algorithm() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcMeta.compression_algorithm)
  return static_cast< ::flare::rpc::CompressionAlgorithm >(compression_algorithm_);
}
inline void RpcMeta::set_compression_algorithm(::flare::rpc::CompressionAlgorithm value) {
  assert(::flare::rpc::CompressionAlgorithm_IsValid(value));
  set_has_compression_algorithm();
  compression_algorithm_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcMeta.compression_algorithm)
}

// optional bool attachment_compressed = 10;
inline bool RpcMeta::has_attachment_compressed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpcMeta::set_has_attachment_compressed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpcMeta::clear_has_attachment_compressed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpcMeta::clear_attachment_compressed() {
  attachment_compressed_ = false;
  clear_has_attachment_compressed();
}
inline bool RpcMeta::attachment_compressed() const {
  // @@protoc_insertion_point(field_get:flare.rpc.RpcMeta.attachment_compressed)
  return attachment_compressed_;
}
inline void RpcMeta::set_attachment_compressed(bool value) {
  set_has_attachment_compressed();
  attachment_compressed_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.RpcMeta.attachment_compressed)
}

// optional .flare.rpc.RpcRequestMeta request_meta = 5;
inline bool RpcMeta::has_request_meta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMeta::set_has_request_meta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMeta::clear_has_request_meta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMeta::clear_request_meta() {
  if (request_meta_ != NULL) request_meta_->Clear();
  clear_has_request_meta();
}
inline const ::flare::rpc::RpcRequestMeta& RpcMeta::_internal_request_meta() const {
  return *request_meta_;
}
inline const ::flare::rpc::RpcRequestMeta& RpcMeta::request_meta() const {
  const ::flare::rpc::RpcRequestMeta* p = request_meta_;
  // @@protoc_insertion_point(field_get:flare.rpc.RpcMeta.request_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::flare::rpc::RpcRequestMeta*>(
      &::flare::rpc::_RpcRequestMeta_default_instance_);
}
inline ::flare::rpc::RpcRequestMeta* RpcMeta::release_request_meta() {
  // @@protoc_insertion_point(field_release:flare.rpc.RpcMeta.request_meta)
  clear_has_request_meta();
  ::flare::rpc::RpcRequestMeta* temp = request_meta_;
  request_meta_ = NULL;
  return temp;
}
inline ::flare::rpc::RpcRequestMeta* RpcMeta::mutable_request_meta() {
  set_has_request_meta();
  if (request_meta_ == NULL) {
    auto* p = CreateMaybeMessage<::flare::rpc::RpcRequestMeta>(GetArenaNoVirtual());
    request_meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flare.rpc.RpcMeta.request_meta)
  return request_meta_;
}
inline void RpcMeta::set_allocated_request_meta(::flare::rpc::RpcRequestMeta* request_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_meta_;
  }
  if (request_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_meta, submessage_arena);
    }
    set_has_request_meta();
  } else {
    clear_has_request_meta();
  }
  request_meta_ = request_meta;
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.RpcMeta.request_meta)
}

// optional .flare.rpc.RpcResponseMeta response_meta = 6;
inline bool RpcMeta::has_response_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMeta::set_has_response_meta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMeta::clear_has_response_meta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMeta::clear_response_meta() {
  if (response_meta_ != NULL) response_meta_->Clear();
  clear_has_response_meta();
}
inline const ::flare::rpc::RpcResponseMeta& RpcMeta::_internal_response_meta() const {
  return *response_meta_;
}
inline const ::flare::rpc::RpcResponseMeta& RpcMeta::response_meta() const {
  const ::flare::rpc::RpcResponseMeta* p = response_meta_;
  // @@protoc_insertion_point(field_get:flare.rpc.RpcMeta.response_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::flare::rpc::RpcResponseMeta*>(
      &::flare::rpc::_RpcResponseMeta_default_instance_);
}
inline ::flare::rpc::RpcResponseMeta* RpcMeta::release_response_meta() {
  // @@protoc_insertion_point(field_release:flare.rpc.RpcMeta.response_meta)
  clear_has_response_meta();
  ::flare::rpc::RpcResponseMeta* temp = response_meta_;
  response_meta_ = NULL;
  return temp;
}
inline ::flare::rpc::RpcResponseMeta* RpcMeta::mutable_response_meta() {
  set_has_response_meta();
  if (response_meta_ == NULL) {
    auto* p = CreateMaybeMessage<::flare::rpc::RpcResponseMeta>(GetArenaNoVirtual());
    response_meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flare.rpc.RpcMeta.response_meta)
  return response_meta_;
}
inline void RpcMeta::set_allocated_response_meta(::flare::rpc::RpcResponseMeta* response_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_meta_;
  }
  if (response_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response_meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response_meta, submessage_arena);
    }
    set_has_response_meta();
  } else {
    clear_has_response_meta();
  }
  response_meta_ = response_meta;
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.RpcMeta.response_meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace flare

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flare::rpc::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flare::rpc::Status>() {
  return ::flare::rpc::Status_descriptor();
}
template <> struct is_proto_enum< ::flare::rpc::MethodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flare::rpc::MethodType>() {
  return ::flare::rpc::MethodType_descriptor();
}
template <> struct is_proto_enum< ::flare::rpc::MessageFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flare::rpc::MessageFlags>() {
  return ::flare::rpc::MessageFlags_descriptor();
}
template <> struct is_proto_enum< ::flare::rpc::CompressionAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flare::rpc::CompressionAlgorithm>() {
  return ::flare::rpc::CompressionAlgorithm_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rpc_5fmeta_2eproto

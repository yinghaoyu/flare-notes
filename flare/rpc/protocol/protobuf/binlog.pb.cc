// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flare/rpc/protocol/protobuf/binlog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flare/rpc/protocol/protobuf/binlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flare {
namespace rpc {
class SerializedClientPacketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerializedClientPacket>
     _instance;
} _SerializedClientPacket_default_instance_;
class SerializedServerPacketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerializedServerPacket>
     _instance;
} _SerializedServerPacket_default_instance_;

namespace protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, streaming_rpc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, using_raw_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedClientPacket, attachment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, streaming_rpc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, using_raw_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedServerPacket, attachment_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SerializedClientPacket)},
  { 10, -1, sizeof(SerializedServerPacket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerializedClientPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerializedServerPacket_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flare/rpc/protocol/protobuf/binlog.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SerializedClientPacket_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerializedClientPacket_default_instance_);_SerializedServerPacket_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerializedServerPacket_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(flare/rpc/protocol/protobuf/binlog.pro"
      "to\022\tflare.rpc\"z\n\026SerializedClientPacket\022"
      "\016\n\006status\030\001 \001(\005\022\025\n\rstreaming_rpc\030\002 \001(\010\022\027"
      "\n\017using_raw_bytes\030\005 \001(\010\022\014\n\004body\030\003 \001(\014\022\022\n"
      "\nattachment\030\004 \001(\014\"z\n\026SerializedServerPac"
      "ket\022\016\n\006method\030\001 \001(\t\022\025\n\rstreaming_rpc\030\002 \001"
      "(\010\022\027\n\017using_raw_bytes\030\005 \001(\010\022\014\n\004body\030\003 \001("
      "\014\022\022\n\nattachment\030\004 \001(\014B\?Z=tencent.com/pro"
      "tobuf/flare/rpc/protocol/protobuf/binlog"
      "_protob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 374);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flare/rpc/protocol/protobuf/binlog.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedClientPacket::kStatusFieldNumber;
const int SerializedClientPacket::kStreamingRpcFieldNumber;
const int SerializedClientPacket::kUsingRawBytesFieldNumber;
const int SerializedClientPacket::kBodyFieldNumber;
const int SerializedClientPacket::kAttachmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedClientPacket::SerializedClientPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.rpc.SerializedClientPacket)
}
SerializedClientPacket::SerializedClientPacket(const SerializedClientPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  attachment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attachment().size() > 0) {
    attachment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&using_raw_bytes_) -
    reinterpret_cast<char*>(&status_)) + sizeof(using_raw_bytes_));
  // @@protoc_insertion_point(copy_constructor:flare.rpc.SerializedClientPacket)
}

void SerializedClientPacket::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&using_raw_bytes_) -
      reinterpret_cast<char*>(&status_)) + sizeof(using_raw_bytes_));
  _cached_size_ = 0;
}

SerializedClientPacket::~SerializedClientPacket() {
  // @@protoc_insertion_point(destructor:flare.rpc.SerializedClientPacket)
  SharedDtor();
}

void SerializedClientPacket::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerializedClientPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedClientPacket::descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerializedClientPacket& SerializedClientPacket::default_instance() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerializedClientPacket* SerializedClientPacket::New(::google::protobuf::Arena* arena) const {
  SerializedClientPacket* n = new SerializedClientPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedClientPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.rpc.SerializedClientPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&using_raw_bytes_) -
      reinterpret_cast<char*>(&status_)) + sizeof(using_raw_bytes_));
  _internal_metadata_.Clear();
}

bool SerializedClientPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.rpc.SerializedClientPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool streaming_rpc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_rpc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attachment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool using_raw_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_raw_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.rpc.SerializedClientPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.rpc.SerializedClientPacket)
  return false;
#undef DO_
}

void SerializedClientPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.rpc.SerializedClientPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // bool streaming_rpc = 2;
  if (this->streaming_rpc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->streaming_rpc(), output);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  // bytes attachment = 4;
  if (this->attachment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attachment(), output);
  }

  // bool using_raw_bytes = 5;
  if (this->using_raw_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->using_raw_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.rpc.SerializedClientPacket)
}

::google::protobuf::uint8* SerializedClientPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.rpc.SerializedClientPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // bool streaming_rpc = 2;
  if (this->streaming_rpc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->streaming_rpc(), target);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  // bytes attachment = 4;
  if (this->attachment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attachment(), target);
  }

  // bool using_raw_bytes = 5;
  if (this->using_raw_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->using_raw_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.rpc.SerializedClientPacket)
  return target;
}

size_t SerializedClientPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.rpc.SerializedClientPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes body = 3;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // bytes attachment = 4;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attachment());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // bool streaming_rpc = 2;
  if (this->streaming_rpc() != 0) {
    total_size += 1 + 1;
  }

  // bool using_raw_bytes = 5;
  if (this->using_raw_bytes() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedClientPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.rpc.SerializedClientPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedClientPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedClientPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.rpc.SerializedClientPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.rpc.SerializedClientPacket)
    MergeFrom(*source);
  }
}

void SerializedClientPacket::MergeFrom(const SerializedClientPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.rpc.SerializedClientPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.attachment().size() > 0) {

    attachment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.streaming_rpc() != 0) {
    set_streaming_rpc(from.streaming_rpc());
  }
  if (from.using_raw_bytes() != 0) {
    set_using_raw_bytes(from.using_raw_bytes());
  }
}

void SerializedClientPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.rpc.SerializedClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedClientPacket::CopyFrom(const SerializedClientPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.rpc.SerializedClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedClientPacket::IsInitialized() const {
  return true;
}

void SerializedClientPacket::Swap(SerializedClientPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedClientPacket::InternalSwap(SerializedClientPacket* other) {
  using std::swap;
  body_.Swap(&other->body_);
  attachment_.Swap(&other->attachment_);
  swap(status_, other->status_);
  swap(streaming_rpc_, other->streaming_rpc_);
  swap(using_raw_bytes_, other->using_raw_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedClientPacket::GetMetadata() const {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedClientPacket

// int32 status = 1;
void SerializedClientPacket::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 SerializedClientPacket::status() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedClientPacket.status)
  return status_;
}
void SerializedClientPacket::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedClientPacket.status)
}

// bool streaming_rpc = 2;
void SerializedClientPacket::clear_streaming_rpc() {
  streaming_rpc_ = false;
}
bool SerializedClientPacket::streaming_rpc() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedClientPacket.streaming_rpc)
  return streaming_rpc_;
}
void SerializedClientPacket::set_streaming_rpc(bool value) {
  
  streaming_rpc_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedClientPacket.streaming_rpc)
}

// bool using_raw_bytes = 5;
void SerializedClientPacket::clear_using_raw_bytes() {
  using_raw_bytes_ = false;
}
bool SerializedClientPacket::using_raw_bytes() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedClientPacket.using_raw_bytes)
  return using_raw_bytes_;
}
void SerializedClientPacket::set_using_raw_bytes(bool value) {
  
  using_raw_bytes_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedClientPacket.using_raw_bytes)
}

// bytes body = 3;
void SerializedClientPacket::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedClientPacket::body() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedClientPacket.body)
  return body_.GetNoArena();
}
void SerializedClientPacket::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedClientPacket.body)
}
#if LANG_CXX11
void SerializedClientPacket::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.SerializedClientPacket.body)
}
#endif
void SerializedClientPacket::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.SerializedClientPacket.body)
}
void SerializedClientPacket::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.SerializedClientPacket.body)
}
::std::string* SerializedClientPacket::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:flare.rpc.SerializedClientPacket.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedClientPacket::release_body() {
  // @@protoc_insertion_point(field_release:flare.rpc.SerializedClientPacket.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedClientPacket::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.SerializedClientPacket.body)
}

// bytes attachment = 4;
void SerializedClientPacket::clear_attachment() {
  attachment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedClientPacket::attachment() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedClientPacket.attachment)
  return attachment_.GetNoArena();
}
void SerializedClientPacket::set_attachment(const ::std::string& value) {
  
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedClientPacket.attachment)
}
#if LANG_CXX11
void SerializedClientPacket::set_attachment(::std::string&& value) {
  
  attachment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.SerializedClientPacket.attachment)
}
#endif
void SerializedClientPacket::set_attachment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.SerializedClientPacket.attachment)
}
void SerializedClientPacket::set_attachment(const void* value, size_t size) {
  
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.SerializedClientPacket.attachment)
}
::std::string* SerializedClientPacket::mutable_attachment() {
  
  // @@protoc_insertion_point(field_mutable:flare.rpc.SerializedClientPacket.attachment)
  return attachment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedClientPacket::release_attachment() {
  // @@protoc_insertion_point(field_release:flare.rpc.SerializedClientPacket.attachment)
  
  return attachment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedClientPacket::set_allocated_attachment(::std::string* attachment) {
  if (attachment != NULL) {
    
  } else {
    
  }
  attachment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attachment);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.SerializedClientPacket.attachment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedServerPacket::kMethodFieldNumber;
const int SerializedServerPacket::kStreamingRpcFieldNumber;
const int SerializedServerPacket::kUsingRawBytesFieldNumber;
const int SerializedServerPacket::kBodyFieldNumber;
const int SerializedServerPacket::kAttachmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedServerPacket::SerializedServerPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flare.rpc.SerializedServerPacket)
}
SerializedServerPacket::SerializedServerPacket(const SerializedServerPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method().size() > 0) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  attachment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attachment().size() > 0) {
    attachment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  ::memcpy(&streaming_rpc_, &from.streaming_rpc_,
    static_cast<size_t>(reinterpret_cast<char*>(&using_raw_bytes_) -
    reinterpret_cast<char*>(&streaming_rpc_)) + sizeof(using_raw_bytes_));
  // @@protoc_insertion_point(copy_constructor:flare.rpc.SerializedServerPacket)
}

void SerializedServerPacket::SharedCtor() {
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&streaming_rpc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&using_raw_bytes_) -
      reinterpret_cast<char*>(&streaming_rpc_)) + sizeof(using_raw_bytes_));
  _cached_size_ = 0;
}

SerializedServerPacket::~SerializedServerPacket() {
  // @@protoc_insertion_point(destructor:flare.rpc.SerializedServerPacket)
  SharedDtor();
}

void SerializedServerPacket::SharedDtor() {
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerializedServerPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedServerPacket::descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerializedServerPacket& SerializedServerPacket::default_instance() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerializedServerPacket* SerializedServerPacket::New(::google::protobuf::Arena* arena) const {
  SerializedServerPacket* n = new SerializedServerPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedServerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:flare.rpc.SerializedServerPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&streaming_rpc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&using_raw_bytes_) -
      reinterpret_cast<char*>(&streaming_rpc_)) + sizeof(using_raw_bytes_));
  _internal_metadata_.Clear();
}

bool SerializedServerPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flare.rpc.SerializedServerPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), static_cast<int>(this->method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flare.rpc.SerializedServerPacket.method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool streaming_rpc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_rpc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attachment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool using_raw_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_raw_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flare.rpc.SerializedServerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flare.rpc.SerializedServerPacket)
  return false;
#undef DO_
}

void SerializedServerPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flare.rpc.SerializedServerPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.rpc.SerializedServerPacket.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method(), output);
  }

  // bool streaming_rpc = 2;
  if (this->streaming_rpc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->streaming_rpc(), output);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  // bytes attachment = 4;
  if (this->attachment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attachment(), output);
  }

  // bool using_raw_bytes = 5;
  if (this->using_raw_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->using_raw_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flare.rpc.SerializedServerPacket)
}

::google::protobuf::uint8* SerializedServerPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flare.rpc.SerializedServerPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flare.rpc.SerializedServerPacket.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }

  // bool streaming_rpc = 2;
  if (this->streaming_rpc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->streaming_rpc(), target);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  // bytes attachment = 4;
  if (this->attachment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attachment(), target);
  }

  // bool using_raw_bytes = 5;
  if (this->using_raw_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->using_raw_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flare.rpc.SerializedServerPacket)
  return target;
}

size_t SerializedServerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flare.rpc.SerializedServerPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // bytes attachment = 4;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attachment());
  }

  // bool streaming_rpc = 2;
  if (this->streaming_rpc() != 0) {
    total_size += 1 + 1;
  }

  // bool using_raw_bytes = 5;
  if (this->using_raw_bytes() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedServerPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flare.rpc.SerializedServerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedServerPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedServerPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flare.rpc.SerializedServerPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flare.rpc.SerializedServerPacket)
    MergeFrom(*source);
  }
}

void SerializedServerPacket::MergeFrom(const SerializedServerPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flare.rpc.SerializedServerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.attachment().size() > 0) {

    attachment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  if (from.streaming_rpc() != 0) {
    set_streaming_rpc(from.streaming_rpc());
  }
  if (from.using_raw_bytes() != 0) {
    set_using_raw_bytes(from.using_raw_bytes());
  }
}

void SerializedServerPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flare.rpc.SerializedServerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedServerPacket::CopyFrom(const SerializedServerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flare.rpc.SerializedServerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedServerPacket::IsInitialized() const {
  return true;
}

void SerializedServerPacket::Swap(SerializedServerPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedServerPacket::InternalSwap(SerializedServerPacket* other) {
  using std::swap;
  method_.Swap(&other->method_);
  body_.Swap(&other->body_);
  attachment_.Swap(&other->attachment_);
  swap(streaming_rpc_, other->streaming_rpc_);
  swap(using_raw_bytes_, other->using_raw_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedServerPacket::GetMetadata() const {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedServerPacket

// string method = 1;
void SerializedServerPacket::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedServerPacket::method() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedServerPacket.method)
  return method_.GetNoArena();
}
void SerializedServerPacket::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedServerPacket.method)
}
#if LANG_CXX11
void SerializedServerPacket::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.SerializedServerPacket.method)
}
#endif
void SerializedServerPacket::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.SerializedServerPacket.method)
}
void SerializedServerPacket::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.SerializedServerPacket.method)
}
::std::string* SerializedServerPacket::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:flare.rpc.SerializedServerPacket.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedServerPacket::release_method() {
  // @@protoc_insertion_point(field_release:flare.rpc.SerializedServerPacket.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedServerPacket::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.SerializedServerPacket.method)
}

// bool streaming_rpc = 2;
void SerializedServerPacket::clear_streaming_rpc() {
  streaming_rpc_ = false;
}
bool SerializedServerPacket::streaming_rpc() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedServerPacket.streaming_rpc)
  return streaming_rpc_;
}
void SerializedServerPacket::set_streaming_rpc(bool value) {
  
  streaming_rpc_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedServerPacket.streaming_rpc)
}

// bool using_raw_bytes = 5;
void SerializedServerPacket::clear_using_raw_bytes() {
  using_raw_bytes_ = false;
}
bool SerializedServerPacket::using_raw_bytes() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedServerPacket.using_raw_bytes)
  return using_raw_bytes_;
}
void SerializedServerPacket::set_using_raw_bytes(bool value) {
  
  using_raw_bytes_ = value;
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedServerPacket.using_raw_bytes)
}

// bytes body = 3;
void SerializedServerPacket::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedServerPacket::body() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedServerPacket.body)
  return body_.GetNoArena();
}
void SerializedServerPacket::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedServerPacket.body)
}
#if LANG_CXX11
void SerializedServerPacket::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.SerializedServerPacket.body)
}
#endif
void SerializedServerPacket::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.SerializedServerPacket.body)
}
void SerializedServerPacket::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.SerializedServerPacket.body)
}
::std::string* SerializedServerPacket::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:flare.rpc.SerializedServerPacket.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedServerPacket::release_body() {
  // @@protoc_insertion_point(field_release:flare.rpc.SerializedServerPacket.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedServerPacket::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.SerializedServerPacket.body)
}

// bytes attachment = 4;
void SerializedServerPacket::clear_attachment() {
  attachment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerializedServerPacket::attachment() const {
  // @@protoc_insertion_point(field_get:flare.rpc.SerializedServerPacket.attachment)
  return attachment_.GetNoArena();
}
void SerializedServerPacket::set_attachment(const ::std::string& value) {
  
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flare.rpc.SerializedServerPacket.attachment)
}
#if LANG_CXX11
void SerializedServerPacket::set_attachment(::std::string&& value) {
  
  attachment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flare.rpc.SerializedServerPacket.attachment)
}
#endif
void SerializedServerPacket::set_attachment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flare.rpc.SerializedServerPacket.attachment)
}
void SerializedServerPacket::set_attachment(const void* value, size_t size) {
  
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flare.rpc.SerializedServerPacket.attachment)
}
::std::string* SerializedServerPacket::mutable_attachment() {
  
  // @@protoc_insertion_point(field_mutable:flare.rpc.SerializedServerPacket.attachment)
  return attachment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedServerPacket::release_attachment() {
  // @@protoc_insertion_point(field_release:flare.rpc.SerializedServerPacket.attachment)
  
  return attachment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedServerPacket::set_allocated_attachment(::std::string* attachment) {
  if (attachment != NULL) {
    
  } else {
    
  }
  attachment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attachment);
  // @@protoc_insertion_point(field_set_allocated:flare.rpc.SerializedServerPacket.attachment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace flare

// @@protoc_insertion_point(global_scope)

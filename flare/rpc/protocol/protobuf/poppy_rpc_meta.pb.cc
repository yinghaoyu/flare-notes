// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flare/rpc/protocol/protobuf/poppy_rpc_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flare/rpc/protocol/protobuf/poppy_rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace poppy {
class RpcMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcMeta>
     _instance;
} _RpcMeta_default_instance_;

namespace protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, canceled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, compress_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, expected_response_compress_type_),
  5,
  2,
  0,
  4,
  6,
  7,
  8,
  1,
  9,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(RpcMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcMeta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flare/rpc/protocol/protobuf/poppy_rpc_meta.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RpcMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcMeta_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n0flare/rpc/protocol/protobuf/poppy_rpc_"
      "meta.proto\022\005poppy\"\273\002\n\007RpcMeta\022!\n\004type\030\001 "
      "\001(\0162\023.poppy.RpcMeta.Type\022\023\n\013sequence_id\030"
      "\002 \002(\003\022\016\n\006method\030d \001(\t\022\017\n\007timeout\030e \001(\003\022\017"
      "\n\006failed\030\310\001 \001(\010\022\021\n\010canceled\030\311\001 \001(\010\022\023\n\ner"
      "ror_code\030\312\001 \001(\005\022\017\n\006reason\030\313\001 \001(\t\022+\n\rcomp"
      "ress_type\030\314\001 \001(\0162\023.poppy.CompressType\022=\n"
      "\037expected_response_compress_type\030\315\001 \001(\0162"
      "\023.poppy.CompressType\"!\n\004Type\022\013\n\007REQUEST\020"
      "\000\022\014\n\010RESPONSE\020\001*@\n\014CompressType\022\026\n\022COMPR"
      "ESS_TYPE_NONE\020\000\022\030\n\024COMPRESS_TYPE_SNAPPY\020"
      "\001BUB\022PoppyRpcMetaProtosZ\?tencent.com/pro"
      "tobuf/flare/rpc/protocol/protobuf/poppy_"
      "rpc_meta"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flare/rpc/protocol/protobuf/poppy_rpc_meta.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto

const ::google::protobuf::EnumDescriptor* RpcMeta_Type_descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::file_level_enum_descriptors[0];
}
bool RpcMeta_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RpcMeta_Type RpcMeta::REQUEST;
const RpcMeta_Type RpcMeta::RESPONSE;
const RpcMeta_Type RpcMeta::Type_MIN;
const RpcMeta_Type RpcMeta::Type_MAX;
const int RpcMeta::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CompressType_descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::file_level_enum_descriptors[1];
}
bool CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta::kTypeFieldNumber;
const int RpcMeta::kSequenceIdFieldNumber;
const int RpcMeta::kMethodFieldNumber;
const int RpcMeta::kTimeoutFieldNumber;
const int RpcMeta::kFailedFieldNumber;
const int RpcMeta::kCanceledFieldNumber;
const int RpcMeta::kErrorCodeFieldNumber;
const int RpcMeta::kReasonFieldNumber;
const int RpcMeta::kCompressTypeFieldNumber;
const int RpcMeta::kExpectedResponseCompressTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta::RpcMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poppy.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method()) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&sequence_id_, &from.sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_type_) -
    reinterpret_cast<char*>(&sequence_id_)) + sizeof(compress_type_));
  // @@protoc_insertion_point(copy_constructor:poppy.RpcMeta)
}

void RpcMeta::SharedCtor() {
  _cached_size_ = 0;
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_type_) -
      reinterpret_cast<char*>(&sequence_id_)) + sizeof(compress_type_));
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:poppy.RpcMeta)
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMeta::descriptor() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcMeta& RpcMeta::default_instance() {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcMeta* RpcMeta::New(::google::protobuf::Arena* arena) const {
  RpcMeta* n = new RpcMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:poppy.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!method_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*method_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&sequence_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&canceled_) -
        reinterpret_cast<char*>(&sequence_id_)) + sizeof(canceled_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compress_type_) -
        reinterpret_cast<char*>(&error_code_)) + sizeof(compress_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poppy.RpcMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .poppy.RpcMeta.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::poppy::RpcMeta_Type_IsValid(value)) {
            set_type(static_cast< ::poppy::RpcMeta_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), static_cast<int>(this->method().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "poppy.RpcMeta.method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timeout = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool failed = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1600 & 0xFF */)) {
          set_has_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool canceled = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 1608 & 0xFF */)) {
          set_has_canceled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_code = 202;
      case 202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 1616 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 203;
      case 203: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "poppy.RpcMeta.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .poppy.CompressType compress_type = 204;
      case 204: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 1632 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::poppy::CompressType_IsValid(value)) {
            set_compress_type(static_cast< ::poppy::CompressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                204, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .poppy.CompressType expected_response_compress_type = 205;
      case 205: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 1640 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::poppy::CompressType_IsValid(value)) {
            set_expected_response_compress_type(static_cast< ::poppy::CompressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                205, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poppy.RpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poppy.RpcMeta)
  return false;
#undef DO_
}

void RpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poppy.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .poppy.RpcMeta.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 sequence_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence_id(), output);
  }

  // optional string method = 100;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poppy.RpcMeta.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->method(), output);
  }

  // optional int64 timeout = 101;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(101, this->timeout(), output);
  }

  // optional bool failed = 200;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(200, this->failed(), output);
  }

  // optional bool canceled = 201;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->canceled(), output);
  }

  // optional int32 error_code = 202;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->error_code(), output);
  }

  // optional string reason = 203;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poppy.RpcMeta.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      203, this->reason(), output);
  }

  // optional .poppy.CompressType compress_type = 204;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      204, this->compress_type(), output);
  }

  // optional .poppy.CompressType expected_response_compress_type = 205;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      205, this->expected_response_compress_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:poppy.RpcMeta)
}

::google::protobuf::uint8* RpcMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poppy.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .poppy.RpcMeta.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 sequence_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence_id(), target);
  }

  // optional string method = 100;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poppy.RpcMeta.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->method(), target);
  }

  // optional int64 timeout = 101;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(101, this->timeout(), target);
  }

  // optional bool failed = 200;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(200, this->failed(), target);
  }

  // optional bool canceled = 201;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->canceled(), target);
  }

  // optional int32 error_code = 202;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->error_code(), target);
  }

  // optional string reason = 203;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poppy.RpcMeta.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        203, this->reason(), target);
  }

  // optional .poppy.CompressType compress_type = 204;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      204, this->compress_type(), target);
  }

  // optional .poppy.CompressType expected_response_compress_type = 205;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      205, this->expected_response_compress_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poppy.RpcMeta)
  return target;
}

size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poppy.RpcMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 sequence_id = 2;
  if (has_sequence_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string method = 100;
    if (has_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string reason = 203;
    if (has_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional .poppy.CompressType expected_response_compress_type = 205;
    if (has_expected_response_compress_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expected_response_compress_type());
    }

    // optional int64 timeout = 101;
    if (has_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeout());
    }

    // optional .poppy.RpcMeta.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool failed = 200;
    if (has_failed()) {
      total_size += 2 + 1;
    }

    // optional bool canceled = 201;
    if (has_canceled()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 error_code = 202;
    if (has_error_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .poppy.CompressType compress_type = 204;
    if (has_compress_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poppy.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poppy.RpcMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poppy.RpcMeta)
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poppy.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      expected_response_compress_type_ = from.expected_response_compress_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      failed_ = from.failed_;
    }
    if (cached_has_bits & 0x00000080u) {
      canceled_ = from.canceled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000200u) {
      compress_type_ = from.compress_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poppy.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poppy.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  method_.Swap(&other->method_);
  reason_.Swap(&other->reason_);
  swap(sequence_id_, other->sequence_id_);
  swap(expected_response_compress_type_, other->expected_response_compress_type_);
  swap(timeout_, other->timeout_);
  swap(type_, other->type_);
  swap(failed_, other->failed_);
  swap(canceled_, other->canceled_);
  swap(error_code_, other->error_code_);
  swap(compress_type_, other->compress_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcMeta::GetMetadata() const {
  protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flare_2frpc_2fprotocol_2fprotobuf_2fpoppy_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcMeta

// optional .poppy.RpcMeta.Type type = 1;
bool RpcMeta::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RpcMeta::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void RpcMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void RpcMeta::clear_type() {
  type_ = 0;
  clear_has_type();
}
::poppy::RpcMeta_Type RpcMeta::type() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.type)
  return static_cast< ::poppy::RpcMeta_Type >(type_);
}
void RpcMeta::set_type(::poppy::RpcMeta_Type value) {
  assert(::poppy::RpcMeta_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.type)
}

// required int64 sequence_id = 2;
bool RpcMeta::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RpcMeta::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RpcMeta::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RpcMeta::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
::google::protobuf::int64 RpcMeta::sequence_id() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.sequence_id)
  return sequence_id_;
}
void RpcMeta::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.sequence_id)
}

// optional string method = 100;
bool RpcMeta::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RpcMeta::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
void RpcMeta::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void RpcMeta::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
const ::std::string& RpcMeta::method() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.method)
  return method_.GetNoArena();
}
void RpcMeta::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.method)
}
#if LANG_CXX11
void RpcMeta::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poppy.RpcMeta.method)
}
#endif
void RpcMeta::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poppy.RpcMeta.method)
}
void RpcMeta::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poppy.RpcMeta.method)
}
::std::string* RpcMeta::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:poppy.RpcMeta.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcMeta::release_method() {
  // @@protoc_insertion_point(field_release:poppy.RpcMeta.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcMeta::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:poppy.RpcMeta.method)
}

// optional int64 timeout = 101;
bool RpcMeta::has_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RpcMeta::set_has_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
void RpcMeta::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
void RpcMeta::clear_timeout() {
  timeout_ = GOOGLE_LONGLONG(0);
  clear_has_timeout();
}
::google::protobuf::int64 RpcMeta::timeout() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.timeout)
  return timeout_;
}
void RpcMeta::set_timeout(::google::protobuf::int64 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.timeout)
}

// optional bool failed = 200;
bool RpcMeta::has_failed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RpcMeta::set_has_failed() {
  _has_bits_[0] |= 0x00000040u;
}
void RpcMeta::clear_has_failed() {
  _has_bits_[0] &= ~0x00000040u;
}
void RpcMeta::clear_failed() {
  failed_ = false;
  clear_has_failed();
}
bool RpcMeta::failed() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.failed)
  return failed_;
}
void RpcMeta::set_failed(bool value) {
  set_has_failed();
  failed_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.failed)
}

// optional bool canceled = 201;
bool RpcMeta::has_canceled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RpcMeta::set_has_canceled() {
  _has_bits_[0] |= 0x00000080u;
}
void RpcMeta::clear_has_canceled() {
  _has_bits_[0] &= ~0x00000080u;
}
void RpcMeta::clear_canceled() {
  canceled_ = false;
  clear_has_canceled();
}
bool RpcMeta::canceled() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.canceled)
  return canceled_;
}
void RpcMeta::set_canceled(bool value) {
  set_has_canceled();
  canceled_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.canceled)
}

// optional int32 error_code = 202;
bool RpcMeta::has_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RpcMeta::set_has_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
void RpcMeta::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
void RpcMeta::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::google::protobuf::int32 RpcMeta::error_code() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.error_code)
  return error_code_;
}
void RpcMeta::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.error_code)
}

// optional string reason = 203;
bool RpcMeta::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RpcMeta::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void RpcMeta::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void RpcMeta::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& RpcMeta::reason() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.reason)
  return reason_.GetNoArena();
}
void RpcMeta::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.reason)
}
#if LANG_CXX11
void RpcMeta::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poppy.RpcMeta.reason)
}
#endif
void RpcMeta::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poppy.RpcMeta.reason)
}
void RpcMeta::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poppy.RpcMeta.reason)
}
::std::string* RpcMeta::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:poppy.RpcMeta.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcMeta::release_reason() {
  // @@protoc_insertion_point(field_release:poppy.RpcMeta.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcMeta::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:poppy.RpcMeta.reason)
}

// optional .poppy.CompressType compress_type = 204;
bool RpcMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RpcMeta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000200u;
}
void RpcMeta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
::poppy::CompressType RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.compress_type)
  return static_cast< ::poppy::CompressType >(compress_type_);
}
void RpcMeta::set_compress_type(::poppy::CompressType value) {
  assert(::poppy::CompressType_IsValid(value));
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.compress_type)
}

// optional .poppy.CompressType expected_response_compress_type = 205;
bool RpcMeta::has_expected_response_compress_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RpcMeta::set_has_expected_response_compress_type() {
  _has_bits_[0] |= 0x00000008u;
}
void RpcMeta::clear_has_expected_response_compress_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void RpcMeta::clear_expected_response_compress_type() {
  expected_response_compress_type_ = 0;
  clear_has_expected_response_compress_type();
}
::poppy::CompressType RpcMeta::expected_response_compress_type() const {
  // @@protoc_insertion_point(field_get:poppy.RpcMeta.expected_response_compress_type)
  return static_cast< ::poppy::CompressType >(expected_response_compress_type_);
}
void RpcMeta::set_expected_response_compress_type(::poppy::CompressType value) {
  assert(::poppy::CompressType_IsValid(value));
  set_has_expected_response_compress_type();
  expected_response_compress_type_ = value;
  // @@protoc_insertion_point(field_set:poppy.RpcMeta.expected_response_compress_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace poppy

// @@protoc_insertion_point(global_scope)

#include "flare/base/logging.h"

#include "benchmark/benchmark.h"

// The benchmark result makes little sense, as L1i / iTLB effect is negligible
// for such small method, and branch predictor should always predict right.
//
// However, when needed, it helps us to compare code generated by FLARE_XXX and
// glog. So I keep it here.

// Run on (76 X 2494.14 MHz CPU s)
// CPU Caches:
//   L1 Data 32K (x76)
//   L1 Instruction 32K (x76)
//   L2 Unified 4096K (x76)
// Load Average: 0.31, 0.44, 0.42
// -----------------------------------------------------------------
// Benchmark                       Time             CPU   Iterations
// -----------------------------------------------------------------
// Benchmark_FlareCheck         1.99 ns         1.99 ns    352364237
// Benchmark_Check              1.99 ns         1.99 ns    352323842
// Benchmark_FlareCheckOp       1.64 ns         1.64 ns    427897862
// Benchmark_CheckOp            1.60 ns         1.60 ns    438266981

namespace flare {

volatile int x, y;

void Benchmark_FlareCheck(benchmark::State& state) {
  while (state.KeepRunning()) {
    FLARE_CHECK(!x);
    FLARE_CHECK(!x, "Some sophisticated log [{}].", x);
  }
}

BENCHMARK(Benchmark_FlareCheck);

void Benchmark_Check(benchmark::State& state) {
  while (state.KeepRunning()) {
    CHECK(!x);
    CHECK(!x) << "Some sophisticated log [" << x << "].";
  }
}

BENCHMARK(Benchmark_Check);

void Benchmark_FlareCheckOp(benchmark::State& state) {
  while (state.KeepRunning()) {
    FLARE_CHECK_LE(x, y);
    FLARE_CHECK_LE(x, y, "Some sophisticated log [{}, {}].", x, y);
  }
}

BENCHMARK(Benchmark_FlareCheckOp);

void Benchmark_CheckOp(benchmark::State& state) {
  while (state.KeepRunning()) {
    CHECK_LE(x, y);
    CHECK_LE(x, y) << "Some sophisticated log [" << x << ", " << y << "].";
  }
}

BENCHMARK(Benchmark_CheckOp);

}  // namespace flare
